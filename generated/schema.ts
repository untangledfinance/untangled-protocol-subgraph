// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class SeniorPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SeniorPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SeniorPool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SeniorPool", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SeniorPool | null {
    return changetype<SeniorPool | null>(store.get_in_block("SeniorPool", id));
  }

  static load(id: string): SeniorPool | null {
    return changetype<SeniorPool | null>(store.get("SeniorPool", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get sharePrice(): BigInt {
    let value = this.get("sharePrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sharePrice(value: BigInt) {
    this.set("sharePrice", Value.fromBigInt(value));
  }

  get totalShares(): BigInt {
    let value = this.get("totalShares");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalShares(value: BigInt) {
    this.set("totalShares", Value.fromBigInt(value));
  }

  get assets(): BigInt {
    let value = this.get("assets");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set assets(value: BigInt) {
    this.set("assets", Value.fromBigInt(value));
  }

  get totalLoansOutstanding(): BigInt {
    let value = this.get("totalLoansOutstanding");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalLoansOutstanding(value: BigInt) {
    this.set("totalLoansOutstanding", Value.fromBigInt(value));
  }

  get tranchedPools(): Array<string> {
    let value = this.get("tranchedPools");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set tranchedPools(value: Array<string>) {
    this.set("tranchedPools", Value.fromStringArray(value));
  }

  get withdrawalCancellationFee(): BigDecimal {
    let value = this.get("withdrawalCancellationFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set withdrawalCancellationFee(value: BigDecimal) {
    this.set("withdrawalCancellationFee", Value.fromBigDecimal(value));
  }

  get estimatedTotalInterest(): BigDecimal {
    let value = this.get("estimatedTotalInterest");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set estimatedTotalInterest(value: BigDecimal) {
    this.set("estimatedTotalInterest", Value.fromBigDecimal(value));
  }

  get estimatedApy(): BigDecimal {
    let value = this.get("estimatedApy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set estimatedApy(value: BigDecimal) {
    this.set("estimatedApy", Value.fromBigDecimal(value));
  }

  get estimatedApyFromGfiRaw(): BigDecimal {
    let value = this.get("estimatedApyFromGfiRaw");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set estimatedApyFromGfiRaw(value: BigDecimal) {
    this.set("estimatedApyFromGfiRaw", Value.fromBigDecimal(value));
  }

  get totalInvested(): BigInt {
    let value = this.get("totalInvested");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalInvested(value: BigInt) {
    this.set("totalInvested", Value.fromBigInt(value));
  }

  get totalWrittenDown(): BigInt {
    let value = this.get("totalWrittenDown");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalWrittenDown(value: BigInt) {
    this.set("totalWrittenDown", Value.fromBigInt(value));
  }

  get defaultRate(): BigDecimal {
    let value = this.get("defaultRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set defaultRate(value: BigDecimal) {
    this.set("defaultRate", Value.fromBigDecimal(value));
  }
}

export class SeniorPoolStakedPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save SeniorPoolStakedPosition entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SeniorPoolStakedPosition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SeniorPoolStakedPosition", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SeniorPoolStakedPosition | null {
    return changetype<SeniorPoolStakedPosition | null>(
      store.get_in_block("SeniorPoolStakedPosition", id)
    );
  }

  static load(id: string): SeniorPoolStakedPosition | null {
    return changetype<SeniorPoolStakedPosition | null>(
      store.get("SeniorPoolStakedPosition", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get initialAmount(): BigInt {
    let value = this.get("initialAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set initialAmount(value: BigInt) {
    this.set("initialAmount", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get positionType(): string {
    let value = this.get("positionType");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set positionType(value: string) {
    this.set("positionType", Value.fromString(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get totalRewardsClaimed(): BigInt {
    let value = this.get("totalRewardsClaimed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRewardsClaimed(value: BigInt) {
    this.set("totalRewardsClaimed", Value.fromBigInt(value));
  }

  get vaultedAsset(): string | null {
    let value = this.get("vaultedAsset");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set vaultedAsset(value: string | null) {
    if (!value) {
      this.unset("vaultedAsset");
    } else {
      this.set("vaultedAsset", Value.fromString(<string>value));
    }
  }
}

export class BorrowerContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BorrowerContract entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BorrowerContract must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BorrowerContract", id.toString(), this);
    }
  }

  static loadInBlock(id: string): BorrowerContract | null {
    return changetype<BorrowerContract | null>(
      store.get_in_block("BorrowerContract", id)
    );
  }

  static load(id: string): BorrowerContract | null {
    return changetype<BorrowerContract | null>(
      store.get("BorrowerContract", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get seniorPoolStakedPositions(): SeniorPoolStakedPositionLoader {
    return new SeniorPoolStakedPositionLoader(
      "User",
      this.get("id")!.toString(),
      "seniorPoolStakedPositions"
    );
  }

  get vaultedStakedPositions(): VaultedStakedPositionLoader {
    return new VaultedStakedPositionLoader(
      "User",
      this.get("id")!.toString(),
      "vaultedStakedPositions"
    );
  }

  get poolTokens(): Array<string> {
    let value = this.get("poolTokens");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set poolTokens(value: Array<string>) {
    this.set("poolTokens", Value.fromStringArray(value));
  }

  get vaultedPoolTokens(): VaultedPoolTokenLoader {
    return new VaultedPoolTokenLoader(
      "User",
      this.get("id")!.toString(),
      "vaultedPoolTokens"
    );
  }

  get zaps(): ZapLoader {
    return new ZapLoader("User", this.get("id")!.toString(), "zaps");
  }

  get uidType(): string | null {
    let value = this.get("uidType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uidType(value: string | null) {
    if (!value) {
      this.unset("uidType");
    } else {
      this.set("uidType", Value.fromString(<string>value));
    }
  }

  get isGoListed(): boolean {
    let value = this.get("isGoListed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isGoListed(value: boolean) {
    this.set("isGoListed", Value.fromBoolean(value));
  }

  get transactions(): TransactionLoader {
    return new TransactionLoader(
      "User",
      this.get("id")!.toString(),
      "transactions"
    );
  }

  get borrowerContracts(): BorrowerContractLoader {
    return new BorrowerContractLoader(
      "User",
      this.get("id")!.toString(),
      "borrowerContracts"
    );
  }

  get communityRewardsTokens(): CommunityRewardsTokenLoader {
    return new CommunityRewardsTokenLoader(
      "User",
      this.get("id")!.toString(),
      "communityRewardsTokens"
    );
  }
}

export class SeniorTrancheInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SeniorTrancheInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SeniorTrancheInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SeniorTrancheInfo", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SeniorTrancheInfo | null {
    return changetype<SeniorTrancheInfo | null>(
      store.get_in_block("SeniorTrancheInfo", id)
    );
  }

  static load(id: string): SeniorTrancheInfo | null {
    return changetype<SeniorTrancheInfo | null>(
      store.get("SeniorTrancheInfo", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get trancheId(): BigInt {
    let value = this.get("trancheId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set trancheId(value: BigInt) {
    this.set("trancheId", Value.fromBigInt(value));
  }

  get loan(): string {
    let value = this.get("loan");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set loan(value: string) {
    this.set("loan", Value.fromString(value));
  }

  get tranchedPool(): string {
    let value = this.get("tranchedPool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tranchedPool(value: string) {
    this.set("tranchedPool", Value.fromString(value));
  }

  get lockedUntil(): BigInt {
    let value = this.get("lockedUntil");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lockedUntil(value: BigInt) {
    this.set("lockedUntil", Value.fromBigInt(value));
  }

  get principalDeposited(): BigInt {
    let value = this.get("principalDeposited");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set principalDeposited(value: BigInt) {
    this.set("principalDeposited", Value.fromBigInt(value));
  }

  get principalSharePrice(): BigInt {
    let value = this.get("principalSharePrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set principalSharePrice(value: BigInt) {
    this.set("principalSharePrice", Value.fromBigInt(value));
  }

  get interestSharePrice(): BigInt {
    let value = this.get("interestSharePrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set interestSharePrice(value: BigInt) {
    this.set("interestSharePrice", Value.fromBigInt(value));
  }
}

export class JuniorTrancheInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save JuniorTrancheInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type JuniorTrancheInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("JuniorTrancheInfo", id.toString(), this);
    }
  }

  static loadInBlock(id: string): JuniorTrancheInfo | null {
    return changetype<JuniorTrancheInfo | null>(
      store.get_in_block("JuniorTrancheInfo", id)
    );
  }

  static load(id: string): JuniorTrancheInfo | null {
    return changetype<JuniorTrancheInfo | null>(
      store.get("JuniorTrancheInfo", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get trancheId(): BigInt {
    let value = this.get("trancheId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set trancheId(value: BigInt) {
    this.set("trancheId", Value.fromBigInt(value));
  }

  get loan(): string {
    let value = this.get("loan");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set loan(value: string) {
    this.set("loan", Value.fromString(value));
  }

  get tranchedPool(): string {
    let value = this.get("tranchedPool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tranchedPool(value: string) {
    this.set("tranchedPool", Value.fromString(value));
  }

  get lockedUntil(): BigInt {
    let value = this.get("lockedUntil");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lockedUntil(value: BigInt) {
    this.set("lockedUntil", Value.fromBigInt(value));
  }

  get principalDeposited(): BigInt {
    let value = this.get("principalDeposited");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set principalDeposited(value: BigInt) {
    this.set("principalDeposited", Value.fromBigInt(value));
  }

  get principalSharePrice(): BigInt {
    let value = this.get("principalSharePrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set principalSharePrice(value: BigInt) {
    this.set("principalSharePrice", Value.fromBigInt(value));
  }

  get interestSharePrice(): BigInt {
    let value = this.get("interestSharePrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set interestSharePrice(value: BigInt) {
    this.set("interestSharePrice", Value.fromBigInt(value));
  }
}

export class CreditLine extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CreditLine entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CreditLine must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CreditLine", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CreditLine | null {
    return changetype<CreditLine | null>(store.get_in_block("CreditLine", id));
  }

  static load(id: string): CreditLine | null {
    return changetype<CreditLine | null>(store.get("CreditLine", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get borrowerContract(): string {
    let value = this.get("borrowerContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set borrowerContract(value: string) {
    this.set("borrowerContract", Value.fromString(value));
  }

  get tranchedPool(): TranchedPoolLoader {
    return new TranchedPoolLoader(
      "CreditLine",
      this.get("id")!.toString(),
      "tranchedPool"
    );
  }

  get limit(): BigInt {
    let value = this.get("limit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set limit(value: BigInt) {
    this.set("limit", Value.fromBigInt(value));
  }

  get maxLimit(): BigInt {
    let value = this.get("maxLimit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxLimit(value: BigInt) {
    this.set("maxLimit", Value.fromBigInt(value));
  }

  get interestApr(): BigInt {
    let value = this.get("interestApr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set interestApr(value: BigInt) {
    this.set("interestApr", Value.fromBigInt(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get interestAccruedAsOf(): BigInt {
    let value = this.get("interestAccruedAsOf");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set interestAccruedAsOf(value: BigInt) {
    this.set("interestAccruedAsOf", Value.fromBigInt(value));
  }

  get nextDueTime(): BigInt {
    let value = this.get("nextDueTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nextDueTime(value: BigInt) {
    this.set("nextDueTime", Value.fromBigInt(value));
  }

  get termEndTime(): BigInt {
    let value = this.get("termEndTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set termEndTime(value: BigInt) {
    this.set("termEndTime", Value.fromBigInt(value));
  }

  get termStartTime(): BigInt {
    let value = this.get("termStartTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set termStartTime(value: BigInt) {
    this.set("termStartTime", Value.fromBigInt(value));
  }

  get lastFullPaymentTime(): BigInt {
    let value = this.get("lastFullPaymentTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastFullPaymentTime(value: BigInt) {
    this.set("lastFullPaymentTime", Value.fromBigInt(value));
  }

  get version(): string {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set version(value: string) {
    this.set("version", Value.fromString(value));
  }

  get lateFeeApr(): BigDecimal {
    let value = this.get("lateFeeApr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set lateFeeApr(value: BigDecimal) {
    this.set("lateFeeApr", Value.fromBigDecimal(value));
  }

  get interestAprDecimal(): BigDecimal {
    let value = this.get("interestAprDecimal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set interestAprDecimal(value: BigDecimal) {
    this.set("interestAprDecimal", Value.fromBigDecimal(value));
  }

  get isEligibleForRewards(): boolean {
    let value = this.get("isEligibleForRewards");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isEligibleForRewards(value: boolean) {
    this.set("isEligibleForRewards", Value.fromBoolean(value));
  }
}

export class TranchedPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TranchedPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TranchedPool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TranchedPool", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TranchedPool | null {
    return changetype<TranchedPool | null>(
      store.get_in_block("TranchedPool", id)
    );
  }

  static load(id: string): TranchedPool | null {
    return changetype<TranchedPool | null>(store.get("TranchedPool", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get principalAmount(): BigInt {
    let value = this.get("principalAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set principalAmount(value: BigInt) {
    this.set("principalAmount", Value.fromBigInt(value));
  }

  get initialInterestOwed(): BigInt {
    let value = this.get("initialInterestOwed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set initialInterestOwed(value: BigInt) {
    this.set("initialInterestOwed", Value.fromBigInt(value));
  }

  get fundingLimit(): BigInt {
    let value = this.get("fundingLimit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fundingLimit(value: BigInt) {
    this.set("fundingLimit", Value.fromBigInt(value));
  }

  get usdcApy(): BigDecimal {
    let value = this.get("usdcApy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set usdcApy(value: BigDecimal) {
    this.set("usdcApy", Value.fromBigDecimal(value));
  }

  get rawGfiApy(): BigDecimal {
    let value = this.get("rawGfiApy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set rawGfiApy(value: BigDecimal) {
    this.set("rawGfiApy", Value.fromBigDecimal(value));
  }

  get totalDeposited(): BigInt {
    let value = this.get("totalDeposited");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDeposited(value: BigInt) {
    this.set("totalDeposited", Value.fromBigInt(value));
  }

  get remainingCapacity(): BigInt {
    let value = this.get("remainingCapacity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set remainingCapacity(value: BigInt) {
    this.set("remainingCapacity", Value.fromBigInt(value));
  }

  get fundableAt(): i32 {
    let value = this.get("fundableAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set fundableAt(value: i32) {
    this.set("fundableAt", Value.fromI32(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get allowedUidTypes(): Array<string> {
    let value = this.get("allowedUidTypes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set allowedUidTypes(value: Array<string>) {
    this.set("allowedUidTypes", Value.fromStringArray(value));
  }

  get backers(): Array<string> {
    let value = this.get("backers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set backers(value: Array<string>) {
    this.set("backers", Value.fromStringArray(value));
  }

  get numBackers(): i32 {
    let value = this.get("numBackers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set numBackers(value: i32) {
    this.set("numBackers", Value.fromI32(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get repaymentSchedule(): Array<string> {
    let value = this.get("repaymentSchedule");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set repaymentSchedule(value: Array<string>) {
    this.set("repaymentSchedule", Value.fromStringArray(value));
  }

  get numRepayments(): i32 {
    let value = this.get("numRepayments");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set numRepayments(value: i32) {
    this.set("numRepayments", Value.fromI32(value));
  }

  get principalAmountRepaid(): BigInt {
    let value = this.get("principalAmountRepaid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set principalAmountRepaid(value: BigInt) {
    this.set("principalAmountRepaid", Value.fromBigInt(value));
  }

  get interestAmountRepaid(): BigInt {
    let value = this.get("interestAmountRepaid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set interestAmountRepaid(value: BigInt) {
    this.set("interestAmountRepaid", Value.fromBigInt(value));
  }

  get actualSeniorPoolInvestment(): BigInt | null {
    let value = this.get("actualSeniorPoolInvestment");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set actualSeniorPoolInvestment(value: BigInt | null) {
    if (!value) {
      this.unset("actualSeniorPoolInvestment");
    } else {
      this.set("actualSeniorPoolInvestment", Value.fromBigInt(<BigInt>value));
    }
  }

  get balance(): BigInt {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get nextDueTime(): BigInt {
    let value = this.get("nextDueTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nextDueTime(value: BigInt) {
    this.set("nextDueTime", Value.fromBigInt(value));
  }

  get termEndTime(): BigInt {
    let value = this.get("termEndTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set termEndTime(value: BigInt) {
    this.set("termEndTime", Value.fromBigInt(value));
  }

  get termStartTime(): BigInt {
    let value = this.get("termStartTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set termStartTime(value: BigInt) {
    this.set("termStartTime", Value.fromBigInt(value));
  }

  get termInSeconds(): i32 {
    let value = this.get("termInSeconds");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set termInSeconds(value: i32) {
    this.set("termInSeconds", Value.fromI32(value));
  }

  get interestRate(): BigDecimal {
    let value = this.get("interestRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set interestRate(value: BigDecimal) {
    this.set("interestRate", Value.fromBigDecimal(value));
  }

  get interestRateBigInt(): BigInt {
    let value = this.get("interestRateBigInt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set interestRateBigInt(value: BigInt) {
    this.set("interestRateBigInt", Value.fromBigInt(value));
  }

  get lateFeeRate(): BigDecimal {
    let value = this.get("lateFeeRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set lateFeeRate(value: BigDecimal) {
    this.set("lateFeeRate", Value.fromBigDecimal(value));
  }

  get interestAccruedAsOf(): BigInt {
    let value = this.get("interestAccruedAsOf");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set interestAccruedAsOf(value: BigInt) {
    this.set("interestAccruedAsOf", Value.fromBigInt(value));
  }

  get borrowerContract(): string {
    let value = this.get("borrowerContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set borrowerContract(value: string) {
    this.set("borrowerContract", Value.fromString(value));
  }

  get repaymentFrequency(): string {
    let value = this.get("repaymentFrequency");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set repaymentFrequency(value: string) {
    this.set("repaymentFrequency", Value.fromString(value));
  }

  get estimatedTotalAssets(): BigInt {
    let value = this.get("estimatedTotalAssets");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set estimatedTotalAssets(value: BigInt) {
    this.set("estimatedTotalAssets", Value.fromBigInt(value));
  }

  get estimatedLeverageRatio(): BigDecimal | null {
    let value = this.get("estimatedLeverageRatio");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set estimatedLeverageRatio(value: BigDecimal | null) {
    if (!value) {
      this.unset("estimatedLeverageRatio");
    } else {
      this.set(
        "estimatedLeverageRatio",
        Value.fromBigDecimal(<BigDecimal>value)
      );
    }
  }

  get creditLine(): string {
    let value = this.get("creditLine");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set creditLine(value: string) {
    this.set("creditLine", Value.fromString(value));
  }

  get creditLineAddress(): Bytes {
    let value = this.get("creditLineAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set creditLineAddress(value: Bytes) {
    this.set("creditLineAddress", Value.fromBytes(value));
  }

  get isPaused(): boolean {
    let value = this.get("isPaused");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isPaused(value: boolean) {
    this.set("isPaused", Value.fromBoolean(value));
  }

  get drawdownsPaused(): boolean {
    let value = this.get("drawdownsPaused");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set drawdownsPaused(value: boolean) {
    this.set("drawdownsPaused", Value.fromBoolean(value));
  }

  get isV1StyleDeal(): boolean {
    let value = this.get("isV1StyleDeal");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isV1StyleDeal(value: boolean) {
    this.set("isV1StyleDeal", Value.fromBoolean(value));
  }

  get juniorFeePercent(): BigInt {
    let value = this.get("juniorFeePercent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set juniorFeePercent(value: BigInt) {
    this.set("juniorFeePercent", Value.fromBigInt(value));
  }

  get reserveFeePercent(): BigInt {
    let value = this.get("reserveFeePercent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set reserveFeePercent(value: BigInt) {
    this.set("reserveFeePercent", Value.fromBigInt(value));
  }

  get juniorDeposited(): BigInt {
    let value = this.get("juniorDeposited");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set juniorDeposited(value: BigInt) {
    this.set("juniorDeposited", Value.fromBigInt(value));
  }

  get estimatedSeniorPoolContribution(): BigInt {
    let value = this.get("estimatedSeniorPoolContribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set estimatedSeniorPoolContribution(value: BigInt) {
    this.set("estimatedSeniorPoolContribution", Value.fromBigInt(value));
  }

  get seniorTranches(): SeniorTrancheInfoLoader {
    return new SeniorTrancheInfoLoader(
      "TranchedPool",
      this.get("id")!.toString(),
      "seniorTranches"
    );
  }

  get juniorTranches(): JuniorTrancheInfoLoader {
    return new JuniorTrancheInfoLoader(
      "TranchedPool",
      this.get("id")!.toString(),
      "juniorTranches"
    );
  }

  get version(): string {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set version(value: string) {
    this.set("version", Value.fromString(value));
  }
}

export class Protocol extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Protocol entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Protocol must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Protocol", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Protocol | null {
    return changetype<Protocol | null>(store.get_in_block("Protocol", id));
  }

  static load(id: string): Protocol | null {
    return changetype<Protocol | null>(store.get("Protocol", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalWritedowns(): BigInt {
    let value = this.get("totalWritedowns");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalWritedowns(value: BigInt) {
    this.set("totalWritedowns", Value.fromBigInt(value));
  }

  get totalDrawdowns(): BigInt {
    let value = this.get("totalDrawdowns");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDrawdowns(value: BigInt) {
    this.set("totalDrawdowns", Value.fromBigInt(value));
  }

  get defaultRate(): BigDecimal {
    let value = this.get("defaultRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set defaultRate(value: BigDecimal) {
    this.set("defaultRate", Value.fromBigDecimal(value));
  }

  get totalPrincipalCollected(): BigInt {
    let value = this.get("totalPrincipalCollected");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPrincipalCollected(value: BigInt) {
    this.set("totalPrincipalCollected", Value.fromBigInt(value));
  }

  get totalInterestCollected(): BigInt {
    let value = this.get("totalInterestCollected");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalInterestCollected(value: BigInt) {
    this.set("totalInterestCollected", Value.fromBigInt(value));
  }

  get totalReserveCollected(): BigInt {
    let value = this.get("totalReserveCollected");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalReserveCollected(value: BigInt) {
    this.set("totalReserveCollected", Value.fromBigInt(value));
  }

  get loans(): Array<string> {
    let value = this.get("loans");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set loans(value: Array<string>) {
    this.set("loans", Value.fromStringArray(value));
  }

  get numLoans(): i32 {
    let value = this.get("numLoans");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set numLoans(value: i32) {
    this.set("numLoans", Value.fromI32(value));
  }
}

export class PoolToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PoolToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PoolToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PoolToken", id.toString(), this);
    }
  }

  static loadInBlock(id: string): PoolToken | null {
    return changetype<PoolToken | null>(store.get_in_block("PoolToken", id));
  }

  static load(id: string): PoolToken | null {
    return changetype<PoolToken | null>(store.get("PoolToken", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get mintedAt(): BigInt {
    let value = this.get("mintedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set mintedAt(value: BigInt) {
    this.set("mintedAt", Value.fromBigInt(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get loan(): string {
    let value = this.get("loan");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set loan(value: string) {
    this.set("loan", Value.fromString(value));
  }

  get tranche(): BigInt {
    let value = this.get("tranche");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tranche(value: BigInt) {
    this.set("tranche", Value.fromBigInt(value));
  }

  get principalAmount(): BigInt {
    let value = this.get("principalAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set principalAmount(value: BigInt) {
    this.set("principalAmount", Value.fromBigInt(value));
  }

  get principalRedeemed(): BigInt {
    let value = this.get("principalRedeemed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set principalRedeemed(value: BigInt) {
    this.set("principalRedeemed", Value.fromBigInt(value));
  }

  get interestRedeemed(): BigInt {
    let value = this.get("interestRedeemed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set interestRedeemed(value: BigInt) {
    this.set("interestRedeemed", Value.fromBigInt(value));
  }

  get interestRedeemable(): BigInt {
    let value = this.get("interestRedeemable");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set interestRedeemable(value: BigInt) {
    this.set("interestRedeemable", Value.fromBigInt(value));
  }

  get rewardsClaimable(): BigInt {
    let value = this.get("rewardsClaimable");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rewardsClaimable(value: BigInt) {
    this.set("rewardsClaimable", Value.fromBigInt(value));
  }

  get rewardsClaimed(): BigInt {
    let value = this.get("rewardsClaimed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rewardsClaimed(value: BigInt) {
    this.set("rewardsClaimed", Value.fromBigInt(value));
  }

  get stakingRewardsClaimable(): BigInt {
    let value = this.get("stakingRewardsClaimable");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stakingRewardsClaimable(value: BigInt) {
    this.set("stakingRewardsClaimable", Value.fromBigInt(value));
  }

  get stakingRewardsClaimed(): BigInt {
    let value = this.get("stakingRewardsClaimed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set stakingRewardsClaimed(value: BigInt) {
    this.set("stakingRewardsClaimed", Value.fromBigInt(value));
  }

  get vaultedAsset(): string | null {
    let value = this.get("vaultedAsset");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set vaultedAsset(value: string | null) {
    if (!value) {
      this.unset("vaultedAsset");
    } else {
      this.set("vaultedAsset", Value.fromString(<string>value));
    }
  }

  get isCapitalCalled(): boolean {
    let value = this.get("isCapitalCalled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isCapitalCalled(value: boolean) {
    this.set("isCapitalCalled", Value.fromBoolean(value));
  }

  get calledAt(): i32 {
    let value = this.get("calledAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set calledAt(value: i32) {
    this.set("calledAt", Value.fromI32(value));
  }

  get callDueAt(): i32 {
    let value = this.get("callDueAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set callDueAt(value: i32) {
    this.set("callDueAt", Value.fromI32(value));
  }
}

export class StakingRewardsData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save StakingRewardsData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type StakingRewardsData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("StakingRewardsData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): StakingRewardsData | null {
    return changetype<StakingRewardsData | null>(
      store.get_in_block("StakingRewardsData", id)
    );
  }

  static load(id: string): StakingRewardsData | null {
    return changetype<StakingRewardsData | null>(
      store.get("StakingRewardsData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get currentEarnRatePerToken(): BigInt {
    let value = this.get("currentEarnRatePerToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set currentEarnRatePerToken(value: BigInt) {
    this.set("currentEarnRatePerToken", Value.fromBigInt(value));
  }
}

export class BackerRewardsData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BackerRewardsData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BackerRewardsData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BackerRewardsData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): BackerRewardsData | null {
    return changetype<BackerRewardsData | null>(
      store.get_in_block("BackerRewardsData", id)
    );
  }

  static load(id: string): BackerRewardsData | null {
    return changetype<BackerRewardsData | null>(
      store.get("BackerRewardsData", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractAddress(): string {
    let value = this.get("contractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set contractAddress(value: string) {
    this.set("contractAddress", Value.fromString(value));
  }

  get totalRewards(): BigInt {
    let value = this.get("totalRewards");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRewards(value: BigInt) {
    this.set("totalRewards", Value.fromBigInt(value));
  }

  get totalRewardPercentOfTotalGFI(): BigDecimal {
    let value = this.get("totalRewardPercentOfTotalGFI");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set totalRewardPercentOfTotalGFI(value: BigDecimal) {
    this.set("totalRewardPercentOfTotalGFI", Value.fromBigDecimal(value));
  }

  get maxInterestDollarsEligible(): BigInt {
    let value = this.get("maxInterestDollarsEligible");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxInterestDollarsEligible(value: BigInt) {
    this.set("maxInterestDollarsEligible", Value.fromBigInt(value));
  }
}

export class Transaction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transaction entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Transaction", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Transaction | null {
    return changetype<Transaction | null>(
      store.get_in_block("Transaction", id)
    );
  }

  static load(id: string): Transaction | null {
    return changetype<Transaction | null>(store.get("Transaction", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get category(): string {
    let value = this.get("category");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set category(value: string) {
    this.set("category", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get blockNumber(): i32 {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set blockNumber(value: i32) {
    this.set("blockNumber", Value.fromI32(value));
  }

  get sentAmount(): BigInt | null {
    let value = this.get("sentAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sentAmount(value: BigInt | null) {
    if (!value) {
      this.unset("sentAmount");
    } else {
      this.set("sentAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get sentToken(): string | null {
    let value = this.get("sentToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sentToken(value: string | null) {
    if (!value) {
      this.unset("sentToken");
    } else {
      this.set("sentToken", Value.fromString(<string>value));
    }
  }

  get sentNftId(): string | null {
    let value = this.get("sentNftId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sentNftId(value: string | null) {
    if (!value) {
      this.unset("sentNftId");
    } else {
      this.set("sentNftId", Value.fromString(<string>value));
    }
  }

  get sentNftType(): string | null {
    let value = this.get("sentNftType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sentNftType(value: string | null) {
    if (!value) {
      this.unset("sentNftType");
    } else {
      this.set("sentNftType", Value.fromString(<string>value));
    }
  }

  get receivedAmount(): BigInt | null {
    let value = this.get("receivedAmount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set receivedAmount(value: BigInt | null) {
    if (!value) {
      this.unset("receivedAmount");
    } else {
      this.set("receivedAmount", Value.fromBigInt(<BigInt>value));
    }
  }

  get receivedToken(): string | null {
    let value = this.get("receivedToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set receivedToken(value: string | null) {
    if (!value) {
      this.unset("receivedToken");
    } else {
      this.set("receivedToken", Value.fromString(<string>value));
    }
  }

  get receivedNftId(): string | null {
    let value = this.get("receivedNftId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set receivedNftId(value: string | null) {
    if (!value) {
      this.unset("receivedNftId");
    } else {
      this.set("receivedNftId", Value.fromString(<string>value));
    }
  }

  get receivedNftType(): string | null {
    let value = this.get("receivedNftType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set receivedNftType(value: string | null) {
    if (!value) {
      this.unset("receivedNftType");
    } else {
      this.set("receivedNftType", Value.fromString(<string>value));
    }
  }

  get loan(): string | null {
    let value = this.get("loan");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set loan(value: string | null) {
    if (!value) {
      this.unset("loan");
    } else {
      this.set("loan", Value.fromString(<string>value));
    }
  }

  get fiduPrice(): BigInt | null {
    let value = this.get("fiduPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fiduPrice(value: BigInt | null) {
    if (!value) {
      this.unset("fiduPrice");
    } else {
      this.set("fiduPrice", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Zap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Zap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Zap must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Zap", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Zap | null {
    return changetype<Zap | null>(store.get_in_block("Zap", id));
  }

  static load(id: string): Zap | null {
    return changetype<Zap | null>(store.get("Zap", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get seniorPoolStakedPosition(): string {
    let value = this.get("seniorPoolStakedPosition");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set seniorPoolStakedPosition(value: string) {
    this.set("seniorPoolStakedPosition", Value.fromString(value));
  }

  get poolToken(): string {
    let value = this.get("poolToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set poolToken(value: string) {
    this.set("poolToken", Value.fromString(value));
  }

  get tranchedPool(): string {
    let value = this.get("tranchedPool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tranchedPool(value: string) {
    this.set("tranchedPool", Value.fromString(value));
  }
}

export class CommunityRewardsToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CommunityRewardsToken entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CommunityRewardsToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CommunityRewardsToken", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CommunityRewardsToken | null {
    return changetype<CommunityRewardsToken | null>(
      store.get_in_block("CommunityRewardsToken", id)
    );
  }

  static load(id: string): CommunityRewardsToken | null {
    return changetype<CommunityRewardsToken | null>(
      store.get("CommunityRewardsToken", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get source(): string {
    let value = this.get("source");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set source(value: string) {
    this.set("source", Value.fromString(value));
  }

  get index(): i32 {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set index(value: i32) {
    this.set("index", Value.fromI32(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get totalGranted(): BigInt {
    let value = this.get("totalGranted");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalGranted(value: BigInt) {
    this.set("totalGranted", Value.fromBigInt(value));
  }

  get totalClaimed(): BigInt {
    let value = this.get("totalClaimed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalClaimed(value: BigInt) {
    this.set("totalClaimed", Value.fromBigInt(value));
  }

  get cliffLength(): BigInt {
    let value = this.get("cliffLength");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set cliffLength(value: BigInt) {
    this.set("cliffLength", Value.fromBigInt(value));
  }

  get vestingLength(): BigInt {
    let value = this.get("vestingLength");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set vestingLength(value: BigInt) {
    this.set("vestingLength", Value.fromBigInt(value));
  }

  get vestingInterval(): BigInt {
    let value = this.get("vestingInterval");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set vestingInterval(value: BigInt) {
    this.set("vestingInterval", Value.fromBigInt(value));
  }

  get grantedAt(): BigInt {
    let value = this.get("grantedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set grantedAt(value: BigInt) {
    this.set("grantedAt", Value.fromBigInt(value));
  }

  get revokedAt(): BigInt {
    let value = this.get("revokedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set revokedAt(value: BigInt) {
    this.set("revokedAt", Value.fromBigInt(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get endTime(): BigInt {
    let value = this.get("endTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endTime(value: BigInt) {
    this.set("endTime", Value.fromBigInt(value));
  }
}

export class MembershipEpoch extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MembershipEpoch entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MembershipEpoch must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MembershipEpoch", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MembershipEpoch | null {
    return changetype<MembershipEpoch | null>(
      store.get_in_block("MembershipEpoch", id)
    );
  }

  static load(id: string): MembershipEpoch | null {
    return changetype<MembershipEpoch | null>(store.get("MembershipEpoch", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get epoch(): BigInt {
    let value = this.get("epoch");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set epoch(value: BigInt) {
    this.set("epoch", Value.fromBigInt(value));
  }

  get totalRewards(): BigInt {
    let value = this.get("totalRewards");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalRewards(value: BigInt) {
    this.set("totalRewards", Value.fromBigInt(value));
  }

  get finalizedAt(): i32 {
    let value = this.get("finalizedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set finalizedAt(value: i32) {
    this.set("finalizedAt", Value.fromI32(value));
  }
}

export class VaultedGfi extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VaultedGfi entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VaultedGfi must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VaultedGfi", id.toString(), this);
    }
  }

  static loadInBlock(id: string): VaultedGfi | null {
    return changetype<VaultedGfi | null>(store.get_in_block("VaultedGfi", id));
  }

  static load(id: string): VaultedGfi | null {
    return changetype<VaultedGfi | null>(store.get("VaultedGfi", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get vaultedAt(): i32 {
    let value = this.get("vaultedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set vaultedAt(value: i32) {
    this.set("vaultedAt", Value.fromI32(value));
  }
}

export class VaultedStakedPosition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save VaultedStakedPosition entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VaultedStakedPosition must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VaultedStakedPosition", id.toString(), this);
    }
  }

  static loadInBlock(id: string): VaultedStakedPosition | null {
    return changetype<VaultedStakedPosition | null>(
      store.get_in_block("VaultedStakedPosition", id)
    );
  }

  static load(id: string): VaultedStakedPosition | null {
    return changetype<VaultedStakedPosition | null>(
      store.get("VaultedStakedPosition", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get usdcEquivalent(): BigInt {
    let value = this.get("usdcEquivalent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set usdcEquivalent(value: BigInt) {
    this.set("usdcEquivalent", Value.fromBigInt(value));
  }

  get vaultedAt(): i32 {
    let value = this.get("vaultedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set vaultedAt(value: i32) {
    this.set("vaultedAt", Value.fromI32(value));
  }

  get seniorPoolStakedPosition(): string {
    let value = this.get("seniorPoolStakedPosition");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set seniorPoolStakedPosition(value: string) {
    this.set("seniorPoolStakedPosition", Value.fromString(value));
  }
}

export class VaultedPoolToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VaultedPoolToken entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VaultedPoolToken must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VaultedPoolToken", id.toString(), this);
    }
  }

  static loadInBlock(id: string): VaultedPoolToken | null {
    return changetype<VaultedPoolToken | null>(
      store.get_in_block("VaultedPoolToken", id)
    );
  }

  static load(id: string): VaultedPoolToken | null {
    return changetype<VaultedPoolToken | null>(
      store.get("VaultedPoolToken", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get usdcEquivalent(): BigInt {
    let value = this.get("usdcEquivalent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set usdcEquivalent(value: BigInt) {
    this.set("usdcEquivalent", Value.fromBigInt(value));
  }

  get vaultedAt(): i32 {
    let value = this.get("vaultedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set vaultedAt(value: i32) {
    this.set("vaultedAt", Value.fromI32(value));
  }

  get poolToken(): string {
    let value = this.get("poolToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set poolToken(value: string) {
    this.set("poolToken", Value.fromString(value));
  }

  get loan(): string {
    let value = this.get("loan");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set loan(value: string) {
    this.set("loan", Value.fromString(value));
  }
}

export class Membership extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Membership entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Membership must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Membership", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Membership | null {
    return changetype<Membership | null>(store.get_in_block("Membership", id));
  }

  static load(id: string): Membership | null {
    return changetype<Membership | null>(store.get("Membership", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get eligibleScore(): BigInt {
    let value = this.get("eligibleScore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set eligibleScore(value: BigInt) {
    this.set("eligibleScore", Value.fromBigInt(value));
  }

  get nextEpochScore(): BigInt {
    let value = this.get("nextEpochScore");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nextEpochScore(value: BigInt) {
    this.set("nextEpochScore", Value.fromBigInt(value));
  }
}

export class MembershipRoster extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MembershipRoster entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MembershipRoster must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MembershipRoster", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MembershipRoster | null {
    return changetype<MembershipRoster | null>(
      store.get_in_block("MembershipRoster", id)
    );
  }

  static load(id: string): MembershipRoster | null {
    return changetype<MembershipRoster | null>(
      store.get("MembershipRoster", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get members(): Array<string> {
    let value = this.get("members");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set members(value: Array<string>) {
    this.set("members", Value.fromStringArray(value));
  }

  get eligibleScoreTotal(): BigInt {
    let value = this.get("eligibleScoreTotal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set eligibleScoreTotal(value: BigInt) {
    this.set("eligibleScoreTotal", Value.fromBigInt(value));
  }

  get nextEpochScoreTotal(): BigInt {
    let value = this.get("nextEpochScoreTotal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set nextEpochScoreTotal(value: BigInt) {
    this.set("nextEpochScoreTotal", Value.fromBigInt(value));
  }

  get lastCheckpointedInEpoch(): BigInt {
    let value = this.get("lastCheckpointedInEpoch");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastCheckpointedInEpoch(value: BigInt) {
    this.set("lastCheckpointedInEpoch", Value.fromBigInt(value));
  }
}

export class MembershipRewardDisbursement extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save MembershipRewardDisbursement entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MembershipRewardDisbursement must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MembershipRewardDisbursement", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MembershipRewardDisbursement | null {
    return changetype<MembershipRewardDisbursement | null>(
      store.get_in_block("MembershipRewardDisbursement", id)
    );
  }

  static load(id: string): MembershipRewardDisbursement | null {
    return changetype<MembershipRewardDisbursement | null>(
      store.get("MembershipRewardDisbursement", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get epoch(): BigInt {
    let value = this.get("epoch");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set epoch(value: BigInt) {
    this.set("epoch", Value.fromBigInt(value));
  }

  get allocatedAt(): i32 {
    let value = this.get("allocatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set allocatedAt(value: i32) {
    this.set("allocatedAt", Value.fromI32(value));
  }

  get rewards(): BigInt {
    let value = this.get("rewards");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rewards(value: BigInt) {
    this.set("rewards", Value.fromBigInt(value));
  }
}

export class SeniorPoolWithdrawalRequest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save SeniorPoolWithdrawalRequest entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SeniorPoolWithdrawalRequest must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SeniorPoolWithdrawalRequest", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SeniorPoolWithdrawalRequest | null {
    return changetype<SeniorPoolWithdrawalRequest | null>(
      store.get_in_block("SeniorPoolWithdrawalRequest", id)
    );
  }

  static load(id: string): SeniorPoolWithdrawalRequest | null {
    return changetype<SeniorPoolWithdrawalRequest | null>(
      store.get("SeniorPoolWithdrawalRequest", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get usdcWithdrawable(): BigInt {
    let value = this.get("usdcWithdrawable");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set usdcWithdrawable(value: BigInt) {
    this.set("usdcWithdrawable", Value.fromBigInt(value));
  }

  get fiduRequested(): BigInt {
    let value = this.get("fiduRequested");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fiduRequested(value: BigInt) {
    this.set("fiduRequested", Value.fromBigInt(value));
  }

  get requestedAt(): i32 {
    let value = this.get("requestedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set requestedAt(value: i32) {
    this.set("requestedAt", Value.fromI32(value));
  }

  get increasedAt(): i32 {
    let value = this.get("increasedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set increasedAt(value: i32) {
    this.set("increasedAt", Value.fromI32(value));
  }

  get canceledAt(): i32 {
    let value = this.get("canceledAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set canceledAt(value: i32) {
    this.set("canceledAt", Value.fromI32(value));
  }
}

export class SeniorPoolWithdrawalEpoch extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save SeniorPoolWithdrawalEpoch entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SeniorPoolWithdrawalEpoch must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SeniorPoolWithdrawalEpoch", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SeniorPoolWithdrawalEpoch | null {
    return changetype<SeniorPoolWithdrawalEpoch | null>(
      store.get_in_block("SeniorPoolWithdrawalEpoch", id)
    );
  }

  static load(id: string): SeniorPoolWithdrawalEpoch | null {
    return changetype<SeniorPoolWithdrawalEpoch | null>(
      store.get("SeniorPoolWithdrawalEpoch", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get epoch(): BigInt {
    let value = this.get("epoch");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set epoch(value: BigInt) {
    this.set("epoch", Value.fromBigInt(value));
  }

  get endsAt(): i32 {
    let value = this.get("endsAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set endsAt(value: i32) {
    this.set("endsAt", Value.fromI32(value));
  }

  get fiduRequested(): BigInt {
    let value = this.get("fiduRequested");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fiduRequested(value: BigInt) {
    this.set("fiduRequested", Value.fromBigInt(value));
  }

  get fiduLiquidated(): BigInt {
    let value = this.get("fiduLiquidated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fiduLiquidated(value: BigInt) {
    this.set("fiduLiquidated", Value.fromBigInt(value));
  }

  get usdcAllocated(): BigInt {
    let value = this.get("usdcAllocated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set usdcAllocated(value: BigInt) {
    this.set("usdcAllocated", Value.fromBigInt(value));
  }
}

export class SeniorPoolWithdrawalRequestRoster extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save SeniorPoolWithdrawalRequestRoster entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SeniorPoolWithdrawalRequestRoster must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SeniorPoolWithdrawalRequestRoster", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SeniorPoolWithdrawalRequestRoster | null {
    return changetype<SeniorPoolWithdrawalRequestRoster | null>(
      store.get_in_block("SeniorPoolWithdrawalRequestRoster", id)
    );
  }

  static load(id: string): SeniorPoolWithdrawalRequestRoster | null {
    return changetype<SeniorPoolWithdrawalRequestRoster | null>(
      store.get("SeniorPoolWithdrawalRequestRoster", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get requests(): Array<string> {
    let value = this.get("requests");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set requests(value: Array<string>) {
    this.set("requests", Value.fromStringArray(value));
  }
}

export class SeniorPoolWithdrawalDisbursement extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save SeniorPoolWithdrawalDisbursement entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SeniorPoolWithdrawalDisbursement must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SeniorPoolWithdrawalDisbursement", id.toString(), this);
    }
  }

  static loadInBlock(id: string): SeniorPoolWithdrawalDisbursement | null {
    return changetype<SeniorPoolWithdrawalDisbursement | null>(
      store.get_in_block("SeniorPoolWithdrawalDisbursement", id)
    );
  }

  static load(id: string): SeniorPoolWithdrawalDisbursement | null {
    return changetype<SeniorPoolWithdrawalDisbursement | null>(
      store.get("SeniorPoolWithdrawalDisbursement", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get epoch(): BigInt {
    let value = this.get("epoch");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set epoch(value: BigInt) {
    this.set("epoch", Value.fromBigInt(value));
  }

  get allocatedAt(): i32 {
    let value = this.get("allocatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set allocatedAt(value: i32) {
    this.set("allocatedAt", Value.fromI32(value));
  }

  get usdcAllocated(): BigInt {
    let value = this.get("usdcAllocated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set usdcAllocated(value: BigInt) {
    this.set("usdcAllocated", Value.fromBigInt(value));
  }

  get fiduLiquidated(): BigInt {
    let value = this.get("fiduLiquidated");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fiduLiquidated(value: BigInt) {
    this.set("fiduLiquidated", Value.fromBigInt(value));
  }
}

export class SeniorPoolWithdrawalDisbursementPostponement extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save SeniorPoolWithdrawalDisbursementPostponement entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SeniorPoolWithdrawalDisbursementPostponement must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "SeniorPoolWithdrawalDisbursementPostponement",
        id.toString(),
        this
      );
    }
  }

  static loadInBlock(
    id: string
  ): SeniorPoolWithdrawalDisbursementPostponement | null {
    return changetype<SeniorPoolWithdrawalDisbursementPostponement | null>(
      store.get_in_block("SeniorPoolWithdrawalDisbursementPostponement", id)
    );
  }

  static load(id: string): SeniorPoolWithdrawalDisbursementPostponement | null {
    return changetype<SeniorPoolWithdrawalDisbursementPostponement | null>(
      store.get("SeniorPoolWithdrawalDisbursementPostponement", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get extendedEpoch(): BigInt {
    let value = this.get("extendedEpoch");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set extendedEpoch(value: BigInt) {
    this.set("extendedEpoch", Value.fromBigInt(value));
  }

  get oldEndsAt(): i32 {
    let value = this.get("oldEndsAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set oldEndsAt(value: i32) {
    this.set("oldEndsAt", Value.fromI32(value));
  }

  get newEndsAt(): i32 {
    let value = this.get("newEndsAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set newEndsAt(value: i32) {
    this.set("newEndsAt", Value.fromI32(value));
  }
}

export class CallableLoan extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CallableLoan entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CallableLoan must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CallableLoan", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CallableLoan | null {
    return changetype<CallableLoan | null>(
      store.get_in_block("CallableLoan", id)
    );
  }

  static load(id: string): CallableLoan | null {
    return changetype<CallableLoan | null>(store.get("CallableLoan", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get fundingLimit(): BigInt {
    let value = this.get("fundingLimit");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set fundingLimit(value: BigInt) {
    this.set("fundingLimit", Value.fromBigInt(value));
  }

  get principalAmount(): BigInt {
    let value = this.get("principalAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set principalAmount(value: BigInt) {
    this.set("principalAmount", Value.fromBigInt(value));
  }

  get initialInterestOwed(): BigInt {
    let value = this.get("initialInterestOwed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set initialInterestOwed(value: BigInt) {
    this.set("initialInterestOwed", Value.fromBigInt(value));
  }

  get usdcApy(): BigDecimal {
    let value = this.get("usdcApy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set usdcApy(value: BigDecimal) {
    this.set("usdcApy", Value.fromBigDecimal(value));
  }

  get rawGfiApy(): BigDecimal {
    let value = this.get("rawGfiApy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set rawGfiApy(value: BigDecimal) {
    this.set("rawGfiApy", Value.fromBigDecimal(value));
  }

  get totalDeposited(): BigInt {
    let value = this.get("totalDeposited");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalDeposited(value: BigInt) {
    this.set("totalDeposited", Value.fromBigInt(value));
  }

  get remainingCapacity(): BigInt {
    let value = this.get("remainingCapacity");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set remainingCapacity(value: BigInt) {
    this.set("remainingCapacity", Value.fromBigInt(value));
  }

  get fundableAt(): i32 {
    let value = this.get("fundableAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set fundableAt(value: i32) {
    this.set("fundableAt", Value.fromI32(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get allowedUidTypes(): Array<string> {
    let value = this.get("allowedUidTypes");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set allowedUidTypes(value: Array<string>) {
    this.set("allowedUidTypes", Value.fromStringArray(value));
  }

  get backers(): Array<string> {
    let value = this.get("backers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set backers(value: Array<string>) {
    this.set("backers", Value.fromStringArray(value));
  }

  get numBackers(): i32 {
    let value = this.get("numBackers");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set numBackers(value: i32) {
    this.set("numBackers", Value.fromI32(value));
  }

  get isPaused(): boolean {
    let value = this.get("isPaused");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isPaused(value: boolean) {
    this.set("isPaused", Value.fromBoolean(value));
  }

  get drawdownsPaused(): boolean {
    let value = this.get("drawdownsPaused");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set drawdownsPaused(value: boolean) {
    this.set("drawdownsPaused", Value.fromBoolean(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get termEndTime(): BigInt {
    let value = this.get("termEndTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set termEndTime(value: BigInt) {
    this.set("termEndTime", Value.fromBigInt(value));
  }

  get termStartTime(): BigInt {
    let value = this.get("termStartTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set termStartTime(value: BigInt) {
    this.set("termStartTime", Value.fromBigInt(value));
  }

  get termInSeconds(): i32 {
    let value = this.get("termInSeconds");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set termInSeconds(value: i32) {
    this.set("termInSeconds", Value.fromI32(value));
  }

  get interestRate(): BigDecimal {
    let value = this.get("interestRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set interestRate(value: BigDecimal) {
    this.set("interestRate", Value.fromBigDecimal(value));
  }

  get interestRateBigInt(): BigInt {
    let value = this.get("interestRateBigInt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set interestRateBigInt(value: BigInt) {
    this.set("interestRateBigInt", Value.fromBigInt(value));
  }

  get lateFeeRate(): BigDecimal {
    let value = this.get("lateFeeRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set lateFeeRate(value: BigDecimal) {
    this.set("lateFeeRate", Value.fromBigDecimal(value));
  }

  get lastFullPaymentTime(): i32 {
    let value = this.get("lastFullPaymentTime");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastFullPaymentTime(value: i32) {
    this.set("lastFullPaymentTime", Value.fromI32(value));
  }

  get availableForDrawdown(): BigInt {
    let value = this.get("availableForDrawdown");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set availableForDrawdown(value: BigInt) {
    this.set("availableForDrawdown", Value.fromBigInt(value));
  }

  get borrowerContract(): string {
    let value = this.get("borrowerContract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set borrowerContract(value: string) {
    this.set("borrowerContract", Value.fromString(value));
  }

  get creditLineAddress(): Bytes {
    let value = this.get("creditLineAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set creditLineAddress(value: Bytes) {
    this.set("creditLineAddress", Value.fromBytes(value));
  }

  get repaymentFrequency(): string {
    let value = this.get("repaymentFrequency");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set repaymentFrequency(value: string) {
    this.set("repaymentFrequency", Value.fromString(value));
  }

  get repaymentSchedule(): Array<string> {
    let value = this.get("repaymentSchedule");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set repaymentSchedule(value: Array<string>) {
    this.set("repaymentSchedule", Value.fromStringArray(value));
  }

  get numRepayments(): i32 {
    let value = this.get("numRepayments");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set numRepayments(value: i32) {
    this.set("numRepayments", Value.fromI32(value));
  }

  get principalAmountRepaid(): BigInt {
    let value = this.get("principalAmountRepaid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set principalAmountRepaid(value: BigInt) {
    this.set("principalAmountRepaid", Value.fromBigInt(value));
  }

  get interestAmountRepaid(): BigInt {
    let value = this.get("interestAmountRepaid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set interestAmountRepaid(value: BigInt) {
    this.set("interestAmountRepaid", Value.fromBigInt(value));
  }
}

export class ScheduledRepayment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ScheduledRepayment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ScheduledRepayment must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ScheduledRepayment", id.toString(), this);
    }
  }

  static loadInBlock(id: string): ScheduledRepayment | null {
    return changetype<ScheduledRepayment | null>(
      store.get_in_block("ScheduledRepayment", id)
    );
  }

  static load(id: string): ScheduledRepayment | null {
    return changetype<ScheduledRepayment | null>(
      store.get("ScheduledRepayment", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get loan(): string {
    let value = this.get("loan");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set loan(value: string) {
    this.set("loan", Value.fromString(value));
  }

  get paymentPeriod(): i32 {
    let value = this.get("paymentPeriod");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set paymentPeriod(value: i32) {
    this.set("paymentPeriod", Value.fromI32(value));
  }

  get estimatedPaymentDate(): i32 {
    let value = this.get("estimatedPaymentDate");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set estimatedPaymentDate(value: i32) {
    this.set("estimatedPaymentDate", Value.fromI32(value));
  }

  get principal(): BigInt {
    let value = this.get("principal");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set principal(value: BigInt) {
    this.set("principal", Value.fromBigInt(value));
  }

  get interest(): BigInt {
    let value = this.get("interest");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set interest(value: BigInt) {
    this.set("interest", Value.fromBigInt(value));
  }
}

export class SeniorPoolStakedPositionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): SeniorPoolStakedPosition[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<SeniorPoolStakedPosition[]>(value);
  }
}

export class VaultedStakedPositionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): VaultedStakedPosition[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<VaultedStakedPosition[]>(value);
  }
}

export class VaultedPoolTokenLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): VaultedPoolToken[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<VaultedPoolToken[]>(value);
  }
}

export class ZapLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Zap[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Zap[]>(value);
  }
}

export class TransactionLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Transaction[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Transaction[]>(value);
  }
}

export class BorrowerContractLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): BorrowerContract[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<BorrowerContract[]>(value);
  }
}

export class CommunityRewardsTokenLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): CommunityRewardsToken[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<CommunityRewardsToken[]>(value);
  }
}

export class TranchedPoolLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TranchedPool[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TranchedPool[]>(value);
  }
}

export class SeniorTrancheInfoLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): SeniorTrancheInfo[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<SeniorTrancheInfo[]>(value);
  }
}

export class JuniorTrancheInfoLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): JuniorTrancheInfo[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<JuniorTrancheInfo[]>(value);
  }
}
