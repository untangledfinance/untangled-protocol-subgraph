// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProxyImplementationUpdated extends ethereum.Event {
  get params(): ProxyImplementationUpdated__Params {
    return new ProxyImplementationUpdated__Params(this);
  }
}

export class ProxyImplementationUpdated__Params {
  _event: ProxyImplementationUpdated;

  constructor(event: ProxyImplementationUpdated) {
    this._event = event;
  }

  get previousImplementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newImplementation(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class EpochFinalized extends ethereum.Event {
  get params(): EpochFinalized__Params {
    return new EpochFinalized__Params(this);
  }
}

export class EpochFinalized__Params {
  _event: EpochFinalized;

  constructor(event: EpochFinalized) {
    this._event = event;
  }

  get epoch(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get totalRewards(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MembershipCollector extends ethereum.SmartContract {
  static bind(address: Address): MembershipCollector {
    return new MembershipCollector("MembershipCollector", address);
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(id: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(id)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(id: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  estimateRewardsFor(epoch: BigInt): BigInt {
    let result = super.call(
      "estimateRewardsFor",
      "estimateRewardsFor(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );

    return result[0].toBigInt();
  }

  try_estimateRewardsFor(epoch: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimateRewardsFor",
      "estimateRewardsFor(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(epoch)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  firstRewardEpoch(): BigInt {
    let result = super.call(
      "firstRewardEpoch",
      "firstRewardEpoch():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_firstRewardEpoch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "firstRewardEpoch",
      "firstRewardEpoch():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastCheckpointAt(): BigInt {
    let result = super.call(
      "lastCheckpointAt",
      "lastCheckpointAt():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastCheckpointAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastCheckpointAt",
      "lastCheckpointAt():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastFinalizedEpoch(): BigInt {
    let result = super.call(
      "lastFinalizedEpoch",
      "lastFinalizedEpoch():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastFinalizedEpoch(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastFinalizedEpoch",
      "lastFinalizedEpoch():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onReceive(amount: BigInt): Bytes {
    let result = super.call("onReceive", "onReceive(uint256):(bytes4)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBytes();
  }

  try_onReceive(amount: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("onReceive", "onReceive(uint256):(bytes4)", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  rewardsForEpoch(param0: BigInt): BigInt {
    let result = super.call(
      "rewardsForEpoch",
      "rewardsForEpoch(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_rewardsForEpoch(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "rewardsForEpoch",
      "rewardsForEpoch(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class DistributeFiduToCall extends ethereum.Call {
  get inputs(): DistributeFiduToCall__Inputs {
    return new DistributeFiduToCall__Inputs(this);
  }

  get outputs(): DistributeFiduToCall__Outputs {
    return new DistributeFiduToCall__Outputs(this);
  }
}

export class DistributeFiduToCall__Inputs {
  _call: DistributeFiduToCall;

  constructor(call: DistributeFiduToCall) {
    this._call = call;
  }

  get addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DistributeFiduToCall__Outputs {
  _call: DistributeFiduToCall;

  constructor(call: DistributeFiduToCall) {
    this._call = call;
  }
}

export class FinalizeEpochsCall extends ethereum.Call {
  get inputs(): FinalizeEpochsCall__Inputs {
    return new FinalizeEpochsCall__Inputs(this);
  }

  get outputs(): FinalizeEpochsCall__Outputs {
    return new FinalizeEpochsCall__Outputs(this);
  }
}

export class FinalizeEpochsCall__Inputs {
  _call: FinalizeEpochsCall;

  constructor(call: FinalizeEpochsCall) {
    this._call = call;
  }
}

export class FinalizeEpochsCall__Outputs {
  _call: FinalizeEpochsCall;

  constructor(call: FinalizeEpochsCall) {
    this._call = call;
  }
}

export class OnReceiveCall extends ethereum.Call {
  get inputs(): OnReceiveCall__Inputs {
    return new OnReceiveCall__Inputs(this);
  }

  get outputs(): OnReceiveCall__Outputs {
    return new OnReceiveCall__Outputs(this);
  }
}

export class OnReceiveCall__Inputs {
  _call: OnReceiveCall;

  constructor(call: OnReceiveCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class OnReceiveCall__Outputs {
  _call: OnReceiveCall;

  constructor(call: OnReceiveCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get implementationAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ownerAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
