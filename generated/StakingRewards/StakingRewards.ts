// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from '@graphprotocol/graph-ts';

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class DepositedAndStaked extends ethereum.Event {
  get params(): DepositedAndStaked__Params {
    return new DepositedAndStaked__Params(this);
  }
}

export class DepositedAndStaked__Params {
  _event: DepositedAndStaked;

  constructor(event: DepositedAndStaked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get depositedAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get lockedUntil(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get multiplier(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class DepositedAndStaked1 extends ethereum.Event {
  get params(): DepositedAndStaked1__Params {
    return new DepositedAndStaked1__Params(this);
  }
}

export class DepositedAndStaked1__Params {
  _event: DepositedAndStaked1;

  constructor(event: DepositedAndStaked1) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get depositedAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class DepositedToCurve extends ethereum.Event {
  get params(): DepositedToCurve__Params {
    return new DepositedToCurve__Params(this);
  }
}

export class DepositedToCurve__Params {
  _event: DepositedToCurve;

  constructor(event: DepositedToCurve) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fiduAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get usdcAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokensReceived(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class DepositedToCurveAndStaked extends ethereum.Event {
  get params(): DepositedToCurveAndStaked__Params {
    return new DepositedToCurveAndStaked__Params(this);
  }
}

export class DepositedToCurveAndStaked__Params {
  _event: DepositedToCurveAndStaked;

  constructor(event: DepositedToCurveAndStaked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fiduAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get usdcAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class EffectiveMultiplierUpdated extends ethereum.Event {
  get params(): EffectiveMultiplierUpdated__Params {
    return new EffectiveMultiplierUpdated__Params(this);
  }
}

export class EffectiveMultiplierUpdated__Params {
  _event: EffectiveMultiplierUpdated;

  constructor(event: EffectiveMultiplierUpdated) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get positionType(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get multiplier(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UntangledConfigUpdated extends ethereum.Event {
  get params(): UntangledConfigUpdated__Params {
    return new UntangledConfigUpdated__Params(this);
  }
}

export class UntangledConfigUpdated__Params {
  _event: UntangledConfigUpdated;

  constructor(event: UntangledConfigUpdated) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get configAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MaxRateAtPercentUpdated extends ethereum.Event {
  get params(): MaxRateAtPercentUpdated__Params {
    return new MaxRateAtPercentUpdated__Params(this);
  }
}

export class MaxRateAtPercentUpdated__Params {
  _event: MaxRateAtPercentUpdated;

  constructor(event: MaxRateAtPercentUpdated) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get maxRateAtPercent(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MaxRateUpdated extends ethereum.Event {
  get params(): MaxRateUpdated__Params {
    return new MaxRateUpdated__Params(this);
  }
}

export class MaxRateUpdated__Params {
  _event: MaxRateUpdated;

  constructor(event: MaxRateUpdated) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get maxRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MinRateAtPercentUpdated extends ethereum.Event {
  get params(): MinRateAtPercentUpdated__Params {
    return new MinRateAtPercentUpdated__Params(this);
  }
}

export class MinRateAtPercentUpdated__Params {
  _event: MinRateAtPercentUpdated;

  constructor(event: MinRateAtPercentUpdated) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get minRateAtPercent(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MinRateUpdated extends ethereum.Event {
  get params(): MinRateUpdated__Params {
    return new MinRateUpdated__Params(this);
  }
}

export class MinRateUpdated__Params {
  _event: MinRateUpdated;

  constructor(event: MinRateUpdated) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get minRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RewardAdded extends ethereum.Event {
  get params(): RewardAdded__Params {
    return new RewardAdded__Params(this);
  }
}

export class RewardAdded__Params {
  _event: RewardAdded;

  constructor(event: RewardAdded) {
    this._event = event;
  }

  get reward(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RewardPaid extends ethereum.Event {
  get params(): RewardPaid__Params {
    return new RewardPaid__Params(this);
  }
}

export class RewardPaid__Params {
  _event: RewardPaid;

  constructor(event: RewardPaid) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get reward(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RewardsParametersUpdated extends ethereum.Event {
  get params(): RewardsParametersUpdated__Params {
    return new RewardsParametersUpdated__Params(this);
  }
}

export class RewardsParametersUpdated__Params {
  _event: RewardsParametersUpdated;

  constructor(event: RewardsParametersUpdated) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get targetCapacity(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get minRate(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get maxRate(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get minRateAtPercent(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get maxRateAtPercent(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get lockedUntil(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get multiplier(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Staked1 extends ethereum.Event {
  get params(): Staked1__Params {
    return new Staked1__Params(this);
  }
}

export class Staked1__Params {
  _event: Staked1;

  constructor(event: Staked1) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get positionType(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get baseTokenExchangeRate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TargetCapacityUpdated extends ethereum.Event {
  get params(): TargetCapacityUpdated__Params {
    return new TargetCapacityUpdated__Params(this);
  }
}

export class TargetCapacityUpdated__Params {
  _event: TargetCapacityUpdated;

  constructor(event: TargetCapacityUpdated) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get targetCapacity(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unstaked extends ethereum.Event {
  get params(): Unstaked__Params {
    return new Unstaked__Params(this);
  }
}

export class Unstaked__Params {
  _event: Unstaked;

  constructor(event: Unstaked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unstaked1 extends ethereum.Event {
  get params(): Unstaked1__Params {
    return new Unstaked1__Params(this);
  }
}

export class Unstaked1__Params {
  _event: Unstaked1;

  constructor(event: Unstaked1) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get positionType(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class UnstakedAndWithdrew extends ethereum.Event {
  get params(): UnstakedAndWithdrew__Params {
    return new UnstakedAndWithdrew__Params(this);
  }
}

export class UnstakedAndWithdrew__Params {
  _event: UnstakedAndWithdrew;

  constructor(event: UnstakedAndWithdrew) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get usdcReceivedAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class UnstakedAndWithdrewMultiple extends ethereum.Event {
  get params(): UnstakedAndWithdrewMultiple__Params {
    return new UnstakedAndWithdrewMultiple__Params(this);
  }
}

export class UnstakedAndWithdrewMultiple__Params {
  _event: UnstakedAndWithdrewMultiple;

  constructor(event: UnstakedAndWithdrewMultiple) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get usdcReceivedAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenIds(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class UnstakedMultiple extends ethereum.Event {
  get params(): UnstakedMultiple__Params {
    return new UnstakedMultiple__Params(this);
  }
}

export class UnstakedMultiple__Params {
  _event: UnstakedMultiple;

  constructor(event: UnstakedMultiple) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenIds(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class VestingScheduleUpdated extends ethereum.Event {
  get params(): VestingScheduleUpdated__Params {
    return new VestingScheduleUpdated__Params(this);
  }
}

export class VestingScheduleUpdated__Params {
  _event: VestingScheduleUpdated;

  constructor(event: VestingScheduleUpdated) {
    this._event = event;
  }

  get who(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vestingLength(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProxyImplementationUpdated extends ethereum.Event {
  get params(): ProxyImplementationUpdated__Params {
    return new ProxyImplementationUpdated__Params(this);
  }
}

export class ProxyImplementationUpdated__Params {
  _event: ProxyImplementationUpdated;

  constructor(event: ProxyImplementationUpdated) {
    this._event = event;
  }

  get previousImplementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newImplementation(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StakingRewards__positionsResultRewardsStruct extends ethereum.Tuple {
  get totalUnvested(): BigInt {
    return this[0].toBigInt();
  }

  get totalVested(): BigInt {
    return this[1].toBigInt();
  }

  get totalPreviouslyVested(): BigInt {
    return this[2].toBigInt();
  }

  get totalClaimed(): BigInt {
    return this[3].toBigInt();
  }

  get startTime(): BigInt {
    return this[4].toBigInt();
  }

  get endTime(): BigInt {
    return this[5].toBigInt();
  }
}

export class StakingRewards__positionsResult {
  value0: BigInt;
  value1: StakingRewards__positionsResultRewardsStruct;
  value2: BigInt;
  value3: BigInt;
  value4: i32;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: StakingRewards__positionsResultRewardsStruct,
    value2: BigInt,
    value3: BigInt,
    value4: i32,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set('value0', ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set('value1', ethereum.Value.fromTuple(this.value1));
    map.set('value2', ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set('value3', ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set(
      'value4',
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set('value5', ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set('value6', ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getRewards(): StakingRewards__positionsResultRewardsStruct {
    return this.value1;
  }

  getLeverageMultiplier(): BigInt {
    return this.value2;
  }

  getLockedUntil(): BigInt {
    return this.value3;
  }

  getPositionType(): i32 {
    return this.value4;
  }

  getUnsafeEffectiveMultiplier(): BigInt {
    return this.value5;
  }

  getUnsafeBaseTokenExchangeRate(): BigInt {
    return this.value6;
  }
}

export class StakingRewards extends ethereum.SmartContract {
  static bind(address: Address): StakingRewards {
    return new StakingRewards('StakingRewards', address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      'DEFAULT_ADMIN_ROLE',
      'DEFAULT_ADMIN_ROLE():(bytes32)',
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      'DEFAULT_ADMIN_ROLE',
      'DEFAULT_ADMIN_ROLE():(bytes32)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MINTER_ROLE(): Bytes {
    let result = super.call('MINTER_ROLE', 'MINTER_ROLE():(bytes32)', []);

    return result[0].toBytes();
  }

  try_MINTER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall('MINTER_ROLE', 'MINTER_ROLE():(bytes32)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  OWNER_ROLE(): Bytes {
    let result = super.call('OWNER_ROLE', 'OWNER_ROLE():(bytes32)', []);

    return result[0].toBytes();
  }

  try_OWNER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall('OWNER_ROLE', 'OWNER_ROLE():(bytes32)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PAUSER_ROLE(): Bytes {
    let result = super.call('PAUSER_ROLE', 'PAUSER_ROLE():(bytes32)', []);

    return result[0].toBytes();
  }

  try_PAUSER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall('PAUSER_ROLE', 'PAUSER_ROLE():(bytes32)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ZAPPER_ROLE(): Bytes {
    let result = super.call('ZAPPER_ROLE', 'ZAPPER_ROLE():(bytes32)', []);

    return result[0].toBytes();
  }

  try_ZAPPER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall('ZAPPER_ROLE', 'ZAPPER_ROLE():(bytes32)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  _tokenIdTracker(): BigInt {
    let result = super.call(
      '_tokenIdTracker',
      '_tokenIdTracker():(uint256)',
      []
    );

    return result[0].toBigInt();
  }

  try__tokenIdTracker(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      '_tokenIdTracker',
      '_tokenIdTracker():(uint256)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  accumulatedRewardsPerToken(): BigInt {
    let result = super.call(
      'accumulatedRewardsPerToken',
      'accumulatedRewardsPerToken():(uint256)',
      []
    );

    return result[0].toBigInt();
  }

  try_accumulatedRewardsPerToken(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'accumulatedRewardsPerToken',
      'accumulatedRewardsPerToken():(uint256)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call('balanceOf', 'balanceOf(address):(uint256)', [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall('balanceOf', 'balanceOf(address):(uint256)', [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call('baseURI', 'baseURI():(string)', []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall('baseURI', 'baseURI():(string)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  claimableRewards(tokenId: BigInt): BigInt {
    let result = super.call(
      'claimableRewards',
      'claimableRewards(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_claimableRewards(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'claimableRewards',
      'claimableRewards(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  config(): Address {
    let result = super.call('config', 'config():(address)', []);

    return result[0].toAddress();
  }

  try_config(): ethereum.CallResult<Address> {
    let result = super.tryCall('config', 'config():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  currentEarnRatePerToken(): BigInt {
    let result = super.call(
      'currentEarnRatePerToken',
      'currentEarnRatePerToken():(uint256)',
      []
    );

    return result[0].toBigInt();
  }

  try_currentEarnRatePerToken(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'currentEarnRatePerToken',
      'currentEarnRatePerToken():(uint256)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  earnedSinceLastCheckpoint(tokenId: BigInt): BigInt {
    let result = super.call(
      'earnedSinceLastCheckpoint',
      'earnedSinceLastCheckpoint(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_earnedSinceLastCheckpoint(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'earnedSinceLastCheckpoint',
      'earnedSinceLastCheckpoint(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call('getApproved', 'getApproved(uint256):(address)', [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      'getApproved',
      'getApproved(uint256):(address)',
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getBaseTokenExchangeRate(positionType: i32): BigInt {
    let result = super.call(
      'getBaseTokenExchangeRate',
      'getBaseTokenExchangeRate(uint8):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(positionType))]
    );

    return result[0].toBigInt();
  }

  try_getBaseTokenExchangeRate(positionType: i32): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getBaseTokenExchangeRate',
      'getBaseTokenExchangeRate(uint8):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(positionType))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEffectiveMultiplierForPositionType(positionType: i32): BigInt {
    let result = super.call(
      'getEffectiveMultiplierForPositionType',
      'getEffectiveMultiplierForPositionType(uint8):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(positionType))]
    );

    return result[0].toBigInt();
  }

  try_getEffectiveMultiplierForPositionType(
    positionType: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getEffectiveMultiplierForPositionType',
      'getEffectiveMultiplierForPositionType(uint8):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(positionType))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call('getRoleAdmin', 'getRoleAdmin(bytes32):(bytes32)', [
      ethereum.Value.fromFixedBytes(role),
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      'getRoleAdmin',
      'getRoleAdmin(bytes32):(bytes32)',
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      'getRoleMember',
      'getRoleMember(bytes32,uint256):(address)',
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index),
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      'getRoleMember',
      'getRoleMember(bytes32,uint256):(address)',
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      'getRoleMemberCount',
      'getRoleMemberCount(bytes32):(uint256)',
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'getRoleMemberCount',
      'getRoleMemberCount(bytes32):(uint256)',
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call('hasRole', 'hasRole(bytes32,address):(bool)', [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall('hasRole', 'hasRole(bytes32,address):(bool)', [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      'isApprovedForAll',
      'isApprovedForAll(address,address):(bool)',
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      'isApprovedForAll',
      'isApprovedForAll(address,address):(bool)',
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastUpdateTime(): BigInt {
    let result = super.call('lastUpdateTime', 'lastUpdateTime():(uint256)', []);

    return result[0].toBigInt();
  }

  try_lastUpdateTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'lastUpdateTime',
      'lastUpdateTime():(uint256)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxRate(): BigInt {
    let result = super.call('maxRate', 'maxRate():(uint256)', []);

    return result[0].toBigInt();
  }

  try_maxRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('maxRate', 'maxRate():(uint256)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxRateAtPercent(): BigInt {
    let result = super.call(
      'maxRateAtPercent',
      'maxRateAtPercent():(uint256)',
      []
    );

    return result[0].toBigInt();
  }

  try_maxRateAtPercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'maxRateAtPercent',
      'maxRateAtPercent():(uint256)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minRate(): BigInt {
    let result = super.call('minRate', 'minRate():(uint256)', []);

    return result[0].toBigInt();
  }

  try_minRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('minRate', 'minRate():(uint256)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minRateAtPercent(): BigInt {
    let result = super.call(
      'minRateAtPercent',
      'minRateAtPercent():(uint256)',
      []
    );

    return result[0].toBigInt();
  }

  try_minRateAtPercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'minRateAtPercent',
      'minRateAtPercent():(uint256)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call('name', 'name():(string)', []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall('name', 'name():(string)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  optimisticClaimable(tokenId: BigInt): BigInt {
    let result = super.call(
      'optimisticClaimable',
      'optimisticClaimable(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_optimisticClaimable(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'optimisticClaimable',
      'optimisticClaimable(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call('ownerOf', 'ownerOf(uint256):(address)', [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall('ownerOf', 'ownerOf(uint256):(address)', [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call('paused', 'paused():(bool)', []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall('paused', 'paused():(bool)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  positionCurrentEarnRate(tokenId: BigInt): BigInt {
    let result = super.call(
      'positionCurrentEarnRate',
      'positionCurrentEarnRate(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_positionCurrentEarnRate(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'positionCurrentEarnRate',
      'positionCurrentEarnRate(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  positionToAccumulatedRewardsPerToken(param0: BigInt): BigInt {
    let result = super.call(
      'positionToAccumulatedRewardsPerToken',
      'positionToAccumulatedRewardsPerToken(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_positionToAccumulatedRewardsPerToken(
    param0: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'positionToAccumulatedRewardsPerToken',
      'positionToAccumulatedRewardsPerToken(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  positions(param0: BigInt): StakingRewards__positionsResult {
    let result = super.call(
      'positions',
      'positions(uint256):(uint256,(uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint8,uint256,uint256)',
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new StakingRewards__positionsResult(
      result[0].toBigInt(),
      changetype<StakingRewards__positionsResultRewardsStruct>(
        result[1].toTuple()
      ),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toI32(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_positions(
    param0: BigInt
  ): ethereum.CallResult<StakingRewards__positionsResult> {
    let result = super.tryCall(
      'positions',
      'positions(uint256):(uint256,(uint256,uint256,uint256,uint256,uint256,uint256),uint256,uint256,uint8,uint256,uint256)',
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StakingRewards__positionsResult(
        value[0].toBigInt(),
        changetype<StakingRewards__positionsResultRewardsStruct>(
          value[1].toTuple()
        ),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toI32(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  rewardPerToken(): BigInt {
    let result = super.call('rewardPerToken', 'rewardPerToken():(uint256)', []);

    return result[0].toBigInt();
  }

  try_rewardPerToken(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'rewardPerToken',
      'rewardPerToken():(uint256)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardsAvailable(): BigInt {
    let result = super.call(
      'rewardsAvailable',
      'rewardsAvailable():(uint256)',
      []
    );

    return result[0].toBigInt();
  }

  try_rewardsAvailable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'rewardsAvailable',
      'rewardsAvailable():(uint256)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakedBalanceOf(tokenId: BigInt): BigInt {
    let result = super.call(
      'stakedBalanceOf',
      'stakedBalanceOf(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_stakedBalanceOf(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'stakedBalanceOf',
      'stakedBalanceOf(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      'supportsInterface',
      'supportsInterface(bytes4):(bool)',
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      'supportsInterface',
      'supportsInterface(bytes4):(bool)',
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call('symbol', 'symbol():(string)', []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall('symbol', 'symbol():(string)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  targetCapacity(): BigInt {
    let result = super.call('targetCapacity', 'targetCapacity():(uint256)', []);

    return result[0].toBigInt();
  }

  try_targetCapacity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'targetCapacity',
      'targetCapacity():(uint256)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call('tokenByIndex', 'tokenByIndex(uint256):(uint256)', [
      ethereum.Value.fromUnsignedBigInt(index),
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'tokenByIndex',
      'tokenByIndex(uint256):(uint256)',
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      'tokenOfOwnerByIndex',
      'tokenOfOwnerByIndex(address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index),
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'tokenOfOwnerByIndex',
      'tokenOfOwnerByIndex(address,uint256):(uint256)',
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call('tokenURI', 'tokenURI(uint256):(string)', [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall('tokenURI', 'tokenURI(uint256):(string)', [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalOptimisticClaimable(owner: Address): BigInt {
    let result = super.call(
      'totalOptimisticClaimable',
      'totalOptimisticClaimable(address):(uint256)',
      [ethereum.Value.fromAddress(owner)]
    );

    return result[0].toBigInt();
  }

  try_totalOptimisticClaimable(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'totalOptimisticClaimable',
      'totalOptimisticClaimable(address):(uint256)',
      [ethereum.Value.fromAddress(owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStakedSupply(): BigInt {
    let result = super.call(
      'totalStakedSupply',
      'totalStakedSupply():(uint256)',
      []
    );

    return result[0].toBigInt();
  }

  try_totalStakedSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'totalStakedSupply',
      'totalStakedSupply():(uint256)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call('totalSupply', 'totalSupply():(uint256)', []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall('totalSupply', 'totalSupply():(uint256)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalVestedAt(
    start: BigInt,
    end: BigInt,
    time: BigInt,
    grantedAmount: BigInt
  ): BigInt {
    let result = super.call(
      'totalVestedAt',
      'totalVestedAt(uint256,uint256,uint256,uint256):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(start),
        ethereum.Value.fromUnsignedBigInt(end),
        ethereum.Value.fromUnsignedBigInt(time),
        ethereum.Value.fromUnsignedBigInt(grantedAmount),
      ]
    );

    return result[0].toBigInt();
  }

  try_totalVestedAt(
    start: BigInt,
    end: BigInt,
    time: BigInt,
    grantedAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'totalVestedAt',
      'totalVestedAt(uint256,uint256,uint256,uint256):(uint256)',
      [
        ethereum.Value.fromUnsignedBigInt(start),
        ethereum.Value.fromUnsignedBigInt(end),
        ethereum.Value.fromUnsignedBigInt(time),
        ethereum.Value.fromUnsignedBigInt(grantedAmount),
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vestingLength(): BigInt {
    let result = super.call('vestingLength', 'vestingLength():(uint256)', []);

    return result[0].toBigInt();
  }

  try_vestingLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      'vestingLength',
      'vestingLength():(uint256)',
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call('owner', 'owner():(address)', []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall('owner', 'owner():(address)', []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class __initialize__Call extends ethereum.Call {
  get inputs(): __initialize__Call__Inputs {
    return new __initialize__Call__Inputs(this);
  }

  get outputs(): __initialize__Call__Outputs {
    return new __initialize__Call__Outputs(this);
  }
}

export class __initialize__Call__Inputs {
  _call: __initialize__Call;

  constructor(call: __initialize__Call) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _config(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class __initialize__Call__Outputs {
  _call: __initialize__Call;

  constructor(call: __initialize__Call) {
    this._call = call;
  }
}

export class AddToStakeCall extends ethereum.Call {
  get inputs(): AddToStakeCall__Inputs {
    return new AddToStakeCall__Inputs(this);
  }

  get outputs(): AddToStakeCall__Outputs {
    return new AddToStakeCall__Outputs(this);
  }
}

export class AddToStakeCall__Inputs {
  _call: AddToStakeCall;

  constructor(call: AddToStakeCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddToStakeCall__Outputs {
  _call: AddToStakeCall;

  constructor(call: AddToStakeCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class DepositAndStakeCall extends ethereum.Call {
  get inputs(): DepositAndStakeCall__Inputs {
    return new DepositAndStakeCall__Inputs(this);
  }

  get outputs(): DepositAndStakeCall__Outputs {
    return new DepositAndStakeCall__Outputs(this);
  }
}

export class DepositAndStakeCall__Inputs {
  _call: DepositAndStakeCall;

  constructor(call: DepositAndStakeCall) {
    this._call = call;
  }

  get usdcAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositAndStakeCall__Outputs {
  _call: DepositAndStakeCall;

  constructor(call: DepositAndStakeCall) {
    this._call = call;
  }
}

export class DepositToCurveCall extends ethereum.Call {
  get inputs(): DepositToCurveCall__Inputs {
    return new DepositToCurveCall__Inputs(this);
  }

  get outputs(): DepositToCurveCall__Outputs {
    return new DepositToCurveCall__Outputs(this);
  }
}

export class DepositToCurveCall__Inputs {
  _call: DepositToCurveCall;

  constructor(call: DepositToCurveCall) {
    this._call = call;
  }

  get fiduAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get usdcAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositToCurveCall__Outputs {
  _call: DepositToCurveCall;

  constructor(call: DepositToCurveCall) {
    this._call = call;
  }
}

export class DepositToCurveAndStakeCall extends ethereum.Call {
  get inputs(): DepositToCurveAndStakeCall__Inputs {
    return new DepositToCurveAndStakeCall__Inputs(this);
  }

  get outputs(): DepositToCurveAndStakeCall__Outputs {
    return new DepositToCurveAndStakeCall__Outputs(this);
  }
}

export class DepositToCurveAndStakeCall__Inputs {
  _call: DepositToCurveAndStakeCall;

  constructor(call: DepositToCurveAndStakeCall) {
    this._call = call;
  }

  get fiduAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get usdcAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositToCurveAndStakeCall__Outputs {
  _call: DepositToCurveAndStakeCall;

  constructor(call: DepositToCurveAndStakeCall) {
    this._call = call;
  }
}

export class DepositToCurveAndStakeFromCall extends ethereum.Call {
  get inputs(): DepositToCurveAndStakeFromCall__Inputs {
    return new DepositToCurveAndStakeFromCall__Inputs(this);
  }

  get outputs(): DepositToCurveAndStakeFromCall__Outputs {
    return new DepositToCurveAndStakeFromCall__Outputs(this);
  }
}

export class DepositToCurveAndStakeFromCall__Inputs {
  _call: DepositToCurveAndStakeFromCall;

  constructor(call: DepositToCurveAndStakeFromCall) {
    this._call = call;
  }

  get nftRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get fiduAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get usdcAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositToCurveAndStakeFromCall__Outputs {
  _call: DepositToCurveAndStakeFromCall;

  constructor(call: DepositToCurveAndStakeFromCall) {
    this._call = call;
  }
}

export class DepositWithPermitAndStakeCall extends ethereum.Call {
  get inputs(): DepositWithPermitAndStakeCall__Inputs {
    return new DepositWithPermitAndStakeCall__Inputs(this);
  }

  get outputs(): DepositWithPermitAndStakeCall__Outputs {
    return new DepositWithPermitAndStakeCall__Outputs(this);
  }
}

export class DepositWithPermitAndStakeCall__Inputs {
  _call: DepositWithPermitAndStakeCall;

  constructor(call: DepositWithPermitAndStakeCall) {
    this._call = call;
  }

  get usdcAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class DepositWithPermitAndStakeCall__Outputs {
  _call: DepositWithPermitAndStakeCall;

  constructor(call: DepositWithPermitAndStakeCall) {
    this._call = call;
  }
}

export class GetRewardCall extends ethereum.Call {
  get inputs(): GetRewardCall__Inputs {
    return new GetRewardCall__Inputs(this);
  }

  get outputs(): GetRewardCall__Outputs {
    return new GetRewardCall__Outputs(this);
  }
}

export class GetRewardCall__Inputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class GetRewardCall__Outputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitZapperRoleCall extends ethereum.Call {
  get inputs(): InitZapperRoleCall__Inputs {
    return new InitZapperRoleCall__Inputs(this);
  }

  get outputs(): InitZapperRoleCall__Outputs {
    return new InitZapperRoleCall__Outputs(this);
  }
}

export class InitZapperRoleCall__Inputs {
  _call: InitZapperRoleCall;

  constructor(call: InitZapperRoleCall) {
    this._call = call;
  }
}

export class InitZapperRoleCall__Outputs {
  _call: InitZapperRoleCall;

  constructor(call: InitZapperRoleCall) {
    this._call = call;
  }
}

export class KickCall extends ethereum.Call {
  get inputs(): KickCall__Inputs {
    return new KickCall__Inputs(this);
  }

  get outputs(): KickCall__Outputs {
    return new KickCall__Outputs(this);
  }
}

export class KickCall__Inputs {
  _call: KickCall;

  constructor(call: KickCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class KickCall__Outputs {
  _call: KickCall;

  constructor(call: KickCall) {
    this._call = call;
  }
}

export class LoadRewardsCall extends ethereum.Call {
  get inputs(): LoadRewardsCall__Inputs {
    return new LoadRewardsCall__Inputs(this);
  }

  get outputs(): LoadRewardsCall__Outputs {
    return new LoadRewardsCall__Outputs(this);
  }
}

export class LoadRewardsCall__Inputs {
  _call: LoadRewardsCall;

  constructor(call: LoadRewardsCall) {
    this._call = call;
  }

  get rewards(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LoadRewardsCall__Outputs {
  _call: LoadRewardsCall;

  constructor(call: LoadRewardsCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetEffectiveMultiplierCall extends ethereum.Call {
  get inputs(): SetEffectiveMultiplierCall__Inputs {
    return new SetEffectiveMultiplierCall__Inputs(this);
  }

  get outputs(): SetEffectiveMultiplierCall__Outputs {
    return new SetEffectiveMultiplierCall__Outputs(this);
  }
}

export class SetEffectiveMultiplierCall__Inputs {
  _call: SetEffectiveMultiplierCall;

  constructor(call: SetEffectiveMultiplierCall) {
    this._call = call;
  }

  get multiplier(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get positionType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SetEffectiveMultiplierCall__Outputs {
  _call: SetEffectiveMultiplierCall;

  constructor(call: SetEffectiveMultiplierCall) {
    this._call = call;
  }
}

export class SetRewardsParametersCall extends ethereum.Call {
  get inputs(): SetRewardsParametersCall__Inputs {
    return new SetRewardsParametersCall__Inputs(this);
  }

  get outputs(): SetRewardsParametersCall__Outputs {
    return new SetRewardsParametersCall__Outputs(this);
  }
}

export class SetRewardsParametersCall__Inputs {
  _call: SetRewardsParametersCall;

  constructor(call: SetRewardsParametersCall) {
    this._call = call;
  }

  get _targetCapacity(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _minRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _maxRate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _minRateAtPercent(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _maxRateAtPercent(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SetRewardsParametersCall__Outputs {
  _call: SetRewardsParametersCall;

  constructor(call: SetRewardsParametersCall) {
    this._call = call;
  }
}

export class SetVestingScheduleCall extends ethereum.Call {
  get inputs(): SetVestingScheduleCall__Inputs {
    return new SetVestingScheduleCall__Inputs(this);
  }

  get outputs(): SetVestingScheduleCall__Outputs {
    return new SetVestingScheduleCall__Outputs(this);
  }
}

export class SetVestingScheduleCall__Inputs {
  _call: SetVestingScheduleCall;

  constructor(call: SetVestingScheduleCall) {
    this._call = call;
  }

  get _vestingLength(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetVestingScheduleCall__Outputs {
  _call: SetVestingScheduleCall;

  constructor(call: SetVestingScheduleCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get positionType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnstakeCall extends ethereum.Call {
  get inputs(): UnstakeCall__Inputs {
    return new UnstakeCall__Inputs(this);
  }

  get outputs(): UnstakeCall__Outputs {
    return new UnstakeCall__Outputs(this);
  }
}

export class UnstakeCall__Inputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnstakeCall__Outputs {
  _call: UnstakeCall;

  constructor(call: UnstakeCall) {
    this._call = call;
  }
}

export class UnstakeAndWithdrawCall extends ethereum.Call {
  get inputs(): UnstakeAndWithdrawCall__Inputs {
    return new UnstakeAndWithdrawCall__Inputs(this);
  }

  get outputs(): UnstakeAndWithdrawCall__Outputs {
    return new UnstakeAndWithdrawCall__Outputs(this);
  }
}

export class UnstakeAndWithdrawCall__Inputs {
  _call: UnstakeAndWithdrawCall;

  constructor(call: UnstakeAndWithdrawCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get usdcAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnstakeAndWithdrawCall__Outputs {
  _call: UnstakeAndWithdrawCall;

  constructor(call: UnstakeAndWithdrawCall) {
    this._call = call;
  }
}

export class UnstakeAndWithdrawInFiduCall extends ethereum.Call {
  get inputs(): UnstakeAndWithdrawInFiduCall__Inputs {
    return new UnstakeAndWithdrawInFiduCall__Inputs(this);
  }

  get outputs(): UnstakeAndWithdrawInFiduCall__Outputs {
    return new UnstakeAndWithdrawInFiduCall__Outputs(this);
  }
}

export class UnstakeAndWithdrawInFiduCall__Inputs {
  _call: UnstakeAndWithdrawInFiduCall;

  constructor(call: UnstakeAndWithdrawInFiduCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get fiduAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnstakeAndWithdrawInFiduCall__Outputs {
  _call: UnstakeAndWithdrawInFiduCall;

  constructor(call: UnstakeAndWithdrawInFiduCall) {
    this._call = call;
  }
}

export class UnstakeAndWithdrawMultipleCall extends ethereum.Call {
  get inputs(): UnstakeAndWithdrawMultipleCall__Inputs {
    return new UnstakeAndWithdrawMultipleCall__Inputs(this);
  }

  get outputs(): UnstakeAndWithdrawMultipleCall__Outputs {
    return new UnstakeAndWithdrawMultipleCall__Outputs(this);
  }
}

export class UnstakeAndWithdrawMultipleCall__Inputs {
  _call: UnstakeAndWithdrawMultipleCall;

  constructor(call: UnstakeAndWithdrawMultipleCall) {
    this._call = call;
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get usdcAmounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class UnstakeAndWithdrawMultipleCall__Outputs {
  _call: UnstakeAndWithdrawMultipleCall;

  constructor(call: UnstakeAndWithdrawMultipleCall) {
    this._call = call;
  }
}

export class UnstakeAndWithdrawMultipleInFiduCall extends ethereum.Call {
  get inputs(): UnstakeAndWithdrawMultipleInFiduCall__Inputs {
    return new UnstakeAndWithdrawMultipleInFiduCall__Inputs(this);
  }

  get outputs(): UnstakeAndWithdrawMultipleInFiduCall__Outputs {
    return new UnstakeAndWithdrawMultipleInFiduCall__Outputs(this);
  }
}

export class UnstakeAndWithdrawMultipleInFiduCall__Inputs {
  _call: UnstakeAndWithdrawMultipleInFiduCall;

  constructor(call: UnstakeAndWithdrawMultipleInFiduCall) {
    this._call = call;
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get fiduAmounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class UnstakeAndWithdrawMultipleInFiduCall__Outputs {
  _call: UnstakeAndWithdrawMultipleInFiduCall;

  constructor(call: UnstakeAndWithdrawMultipleInFiduCall) {
    this._call = call;
  }
}

export class UnstakeMultipleCall extends ethereum.Call {
  get inputs(): UnstakeMultipleCall__Inputs {
    return new UnstakeMultipleCall__Inputs(this);
  }

  get outputs(): UnstakeMultipleCall__Outputs {
    return new UnstakeMultipleCall__Outputs(this);
  }
}

export class UnstakeMultipleCall__Inputs {
  _call: UnstakeMultipleCall;

  constructor(call: UnstakeMultipleCall) {
    this._call = call;
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class UnstakeMultipleCall__Outputs {
  _call: UnstakeMultipleCall;

  constructor(call: UnstakeMultipleCall) {
    this._call = call;
  }
}

export class UpdatePositionEffectiveMultiplierCall extends ethereum.Call {
  get inputs(): UpdatePositionEffectiveMultiplierCall__Inputs {
    return new UpdatePositionEffectiveMultiplierCall__Inputs(this);
  }

  get outputs(): UpdatePositionEffectiveMultiplierCall__Outputs {
    return new UpdatePositionEffectiveMultiplierCall__Outputs(this);
  }
}

export class UpdatePositionEffectiveMultiplierCall__Inputs {
  _call: UpdatePositionEffectiveMultiplierCall;

  constructor(call: UpdatePositionEffectiveMultiplierCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatePositionEffectiveMultiplierCall__Outputs {
  _call: UpdatePositionEffectiveMultiplierCall;

  constructor(call: UpdatePositionEffectiveMultiplierCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get implementationAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ownerAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
