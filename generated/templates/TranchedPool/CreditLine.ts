// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CreditLine__payResultValue0Struct extends ethereum.Tuple {
  get owedInterestPayment(): BigInt {
    return this[0].toBigInt();
  }

  get accruedInterestPayment(): BigInt {
    return this[1].toBigInt();
  }

  get principalPayment(): BigInt {
    return this[2].toBigInt();
  }

  get additionalBalancePayment(): BigInt {
    return this[3].toBigInt();
  }

  get paymentRemaining(): BigInt {
    return this[4].toBigInt();
  }
}

export class CreditLine__pay1ResultValue0Struct extends ethereum.Tuple {
  get owedInterestPayment(): BigInt {
    return this[0].toBigInt();
  }

  get accruedInterestPayment(): BigInt {
    return this[1].toBigInt();
  }

  get principalPayment(): BigInt {
    return this[2].toBigInt();
  }

  get additionalBalancePayment(): BigInt {
    return this[3].toBigInt();
  }

  get paymentRemaining(): BigInt {
    return this[4].toBigInt();
  }
}

export class CreditLine__scheduleResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getSchedule(): Address {
    return this.value0;
  }

  getStartTime(): BigInt {
    return this.value1;
  }
}

export class CreditLine extends ethereum.SmartContract {
  static bind(address: Address): CreditLine {
    return new CreditLine("CreditLine", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  OWNER_ROLE(): Bytes {
    let result = super.call("OWNER_ROLE", "OWNER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_OWNER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("OWNER_ROLE", "OWNER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PAUSER_ROLE(): Bytes {
    let result = super.call("PAUSER_ROLE", "PAUSER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_PAUSER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("PAUSER_ROLE", "PAUSER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  balance(): BigInt {
    let result = super.call("balance", "balance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_balance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balance", "balance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrower(): Address {
    let result = super.call("borrower", "borrower():(address)", []);

    return result[0].toAddress();
  }

  try_borrower(): ethereum.CallResult<Address> {
    let result = super.tryCall("borrower", "borrower():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  config(): Address {
    let result = super.call("config", "config():(address)", []);

    return result[0].toAddress();
  }

  try_config(): ethereum.CallResult<Address> {
    let result = super.tryCall("config", "config():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  currentLimit(): BigInt {
    let result = super.call("currentLimit", "currentLimit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentLimit", "currentLimit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  interestAccrued(): BigInt {
    let result = super.call(
      "interestAccrued",
      "interestAccrued():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_interestAccrued(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestAccrued",
      "interestAccrued():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  interestAccruedAsOf(): BigInt {
    let result = super.call(
      "interestAccruedAsOf",
      "interestAccruedAsOf():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_interestAccruedAsOf(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestAccruedAsOf",
      "interestAccruedAsOf():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  interestAccruedAt(timestamp: BigInt): BigInt {
    let result = super.call(
      "interestAccruedAt",
      "interestAccruedAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );

    return result[0].toBigInt();
  }

  try_interestAccruedAt(timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestAccruedAt",
      "interestAccruedAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  interestApr(): BigInt {
    let result = super.call("interestApr", "interestApr():(uint256)", []);

    return result[0].toBigInt();
  }

  try_interestApr(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("interestApr", "interestApr():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  interestOwed(): BigInt {
    let result = super.call("interestOwed", "interestOwed():(uint256)", []);

    return result[0].toBigInt();
  }

  try_interestOwed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("interestOwed", "interestOwed():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  interestOwedAt(timestamp: BigInt): BigInt {
    let result = super.call(
      "interestOwedAt",
      "interestOwedAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );

    return result[0].toBigInt();
  }

  try_interestOwedAt(timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestOwedAt",
      "interestOwedAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isAdmin(): boolean {
    let result = super.call("isAdmin", "isAdmin():(bool)", []);

    return result[0].toBoolean();
  }

  try_isAdmin(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAdmin", "isAdmin():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLate(): boolean {
    let result = super.call("isLate", "isLate():(bool)", []);

    return result[0].toBoolean();
  }

  try_isLate(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isLate", "isLate():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastFullPaymentTime(): BigInt {
    let result = super.call(
      "lastFullPaymentTime",
      "lastFullPaymentTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastFullPaymentTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastFullPaymentTime",
      "lastFullPaymentTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lateFeeApr(): BigInt {
    let result = super.call("lateFeeApr", "lateFeeApr():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lateFeeApr(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lateFeeApr", "lateFeeApr():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  limit(): BigInt {
    let result = super.call("limit", "limit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_limit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("limit", "limit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxLimit(): BigInt {
    let result = super.call("maxLimit", "maxLimit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxLimit", "maxLimit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextDueTime(): BigInt {
    let result = super.call("nextDueTime", "nextDueTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextDueTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextDueTime", "nextDueTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextDueTimeAt(timestamp: BigInt): BigInt {
    let result = super.call(
      "nextDueTimeAt",
      "nextDueTimeAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );

    return result[0].toBigInt();
  }

  try_nextDueTimeAt(timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextDueTimeAt",
      "nextDueTimeAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  paymentPeriodInDays(): BigInt {
    let result = super.call(
      "paymentPeriodInDays",
      "paymentPeriodInDays():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_paymentPeriodInDays(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "paymentPeriodInDays",
      "paymentPeriodInDays():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paymentPeriodInDays1(): BigInt {
    let result = super.call(
      "paymentPeriodInDays",
      "paymentPeriodInDays():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_paymentPeriodInDays1(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "paymentPeriodInDays",
      "paymentPeriodInDays():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pay(paymentAmount: BigInt): CreditLine__payResultValue0Struct {
    let result = super.call(
      "pay",
      "pay(uint256):((uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(paymentAmount)]
    );

    return changetype<CreditLine__payResultValue0Struct>(result[0].toTuple());
  }

  try_pay(
    paymentAmount: BigInt
  ): ethereum.CallResult<CreditLine__payResultValue0Struct> {
    let result = super.tryCall(
      "pay",
      "pay(uint256):((uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(paymentAmount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<CreditLine__payResultValue0Struct>(value[0].toTuple())
    );
  }

  pay1(
    principalPayment: BigInt,
    interestPayment: BigInt
  ): CreditLine__pay1ResultValue0Struct {
    let result = super.call(
      "pay",
      "pay(uint256,uint256):((uint256,uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(principalPayment),
        ethereum.Value.fromUnsignedBigInt(interestPayment)
      ]
    );

    return changetype<CreditLine__pay1ResultValue0Struct>(result[0].toTuple());
  }

  try_pay1(
    principalPayment: BigInt,
    interestPayment: BigInt
  ): ethereum.CallResult<CreditLine__pay1ResultValue0Struct> {
    let result = super.tryCall(
      "pay",
      "pay(uint256,uint256):((uint256,uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(principalPayment),
        ethereum.Value.fromUnsignedBigInt(interestPayment)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<CreditLine__pay1ResultValue0Struct>(value[0].toTuple())
    );
  }

  principalOwed(): BigInt {
    let result = super.call("principalOwed", "principalOwed():(uint256)", []);

    return result[0].toBigInt();
  }

  try_principalOwed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "principalOwed",
      "principalOwed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  principalOwedAt(timestamp: BigInt): BigInt {
    let result = super.call(
      "principalOwedAt",
      "principalOwedAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );

    return result[0].toBigInt();
  }

  try_principalOwedAt(timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "principalOwedAt",
      "principalOwedAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  schedule(): CreditLine__scheduleResult {
    let result = super.call("schedule", "schedule():(address,uint64)", []);

    return new CreditLine__scheduleResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_schedule(): ethereum.CallResult<CreditLine__scheduleResult> {
    let result = super.tryCall("schedule", "schedule():(address,uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CreditLine__scheduleResult(value[0].toAddress(), value[1].toBigInt())
    );
  }

  termEndTime(): BigInt {
    let result = super.call("termEndTime", "termEndTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_termEndTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("termEndTime", "termEndTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  termInDays(): BigInt {
    let result = super.call("termInDays", "termInDays():(uint256)", []);

    return result[0].toBigInt();
  }

  try_termInDays(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("termInDays", "termInDays():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  termStartTime(): BigInt {
    let result = super.call("termStartTime", "termStartTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_termStartTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "termStartTime",
      "termStartTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalInterestAccrued(): BigInt {
    let result = super.call(
      "totalInterestAccrued",
      "totalInterestAccrued():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalInterestAccrued(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalInterestAccrued",
      "totalInterestAccrued():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalInterestAccruedAt(timestamp: BigInt): BigInt {
    let result = super.call(
      "totalInterestAccruedAt",
      "totalInterestAccruedAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );

    return result[0].toBigInt();
  }

  try_totalInterestAccruedAt(timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalInterestAccruedAt",
      "totalInterestAccruedAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalInterestOwed(): BigInt {
    let result = super.call(
      "totalInterestOwed",
      "totalInterestOwed():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalInterestOwed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalInterestOwed",
      "totalInterestOwed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalInterestOwedAt(timestamp: BigInt): BigInt {
    let result = super.call(
      "totalInterestOwedAt",
      "totalInterestOwedAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );

    return result[0].toBigInt();
  }

  try_totalInterestOwedAt(timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalInterestOwedAt",
      "totalInterestOwedAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalInterestPaid(): BigInt {
    let result = super.call(
      "totalInterestPaid",
      "totalInterestPaid():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalInterestPaid(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalInterestPaid",
      "totalInterestPaid():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalPrincipalOwed(): BigInt {
    let result = super.call(
      "totalPrincipalOwed",
      "totalPrincipalOwed():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalPrincipalOwed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalPrincipalOwed",
      "totalPrincipalOwed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalPrincipalOwedAt(timestamp: BigInt): BigInt {
    let result = super.call(
      "totalPrincipalOwedAt",
      "totalPrincipalOwedAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );

    return result[0].toBigInt();
  }

  try_totalPrincipalOwedAt(timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalPrincipalOwedAt",
      "totalPrincipalOwedAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalPrincipalPaid(): BigInt {
    let result = super.call(
      "totalPrincipalPaid",
      "totalPrincipalPaid():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalPrincipalPaid(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalPrincipalPaid",
      "totalPrincipalPaid():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withinPrincipalGracePeriod(): boolean {
    let result = super.call(
      "withinPrincipalGracePeriod",
      "withinPrincipalGracePeriod():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_withinPrincipalGracePeriod(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "withinPrincipalGracePeriod",
      "withinPrincipalGracePeriod():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class __BaseUpgradeablePausable__initCall extends ethereum.Call {
  get inputs(): __BaseUpgradeablePausable__initCall__Inputs {
    return new __BaseUpgradeablePausable__initCall__Inputs(this);
  }

  get outputs(): __BaseUpgradeablePausable__initCall__Outputs {
    return new __BaseUpgradeablePausable__initCall__Outputs(this);
  }
}

export class __BaseUpgradeablePausable__initCall__Inputs {
  _call: __BaseUpgradeablePausable__initCall;

  constructor(call: __BaseUpgradeablePausable__initCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class __BaseUpgradeablePausable__initCall__Outputs {
  _call: __BaseUpgradeablePausable__initCall;

  constructor(call: __BaseUpgradeablePausable__initCall) {
    this._call = call;
  }
}

export class __PauserPausable__initCall extends ethereum.Call {
  get inputs(): __PauserPausable__initCall__Inputs {
    return new __PauserPausable__initCall__Inputs(this);
  }

  get outputs(): __PauserPausable__initCall__Outputs {
    return new __PauserPausable__initCall__Outputs(this);
  }
}

export class __PauserPausable__initCall__Inputs {
  _call: __PauserPausable__initCall;

  constructor(call: __PauserPausable__initCall) {
    this._call = call;
  }
}

export class __PauserPausable__initCall__Outputs {
  _call: __PauserPausable__initCall;

  constructor(call: __PauserPausable__initCall) {
    this._call = call;
  }
}

export class DrawdownCall extends ethereum.Call {
  get inputs(): DrawdownCall__Inputs {
    return new DrawdownCall__Inputs(this);
  }

  get outputs(): DrawdownCall__Outputs {
    return new DrawdownCall__Outputs(this);
  }
}

export class DrawdownCall__Inputs {
  _call: DrawdownCall;

  constructor(call: DrawdownCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DrawdownCall__Outputs {
  _call: DrawdownCall;

  constructor(call: DrawdownCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _config(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _borrower(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _maxLimit(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _interestApr(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _schedule(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _lateFeeApr(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PayCall extends ethereum.Call {
  get inputs(): PayCall__Inputs {
    return new PayCall__Inputs(this);
  }

  get outputs(): PayCall__Outputs {
    return new PayCall__Outputs(this);
  }
}

export class PayCall__Inputs {
  _call: PayCall;

  constructor(call: PayCall) {
    this._call = call;
  }

  get paymentAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PayCall__Outputs {
  _call: PayCall;

  constructor(call: PayCall) {
    this._call = call;
  }

  get value0(): PayCallValue0Struct {
    return changetype<PayCallValue0Struct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class PayCallValue0Struct extends ethereum.Tuple {
  get owedInterestPayment(): BigInt {
    return this[0].toBigInt();
  }

  get accruedInterestPayment(): BigInt {
    return this[1].toBigInt();
  }

  get principalPayment(): BigInt {
    return this[2].toBigInt();
  }

  get additionalBalancePayment(): BigInt {
    return this[3].toBigInt();
  }

  get paymentRemaining(): BigInt {
    return this[4].toBigInt();
  }
}

export class Pay1Call extends ethereum.Call {
  get inputs(): Pay1Call__Inputs {
    return new Pay1Call__Inputs(this);
  }

  get outputs(): Pay1Call__Outputs {
    return new Pay1Call__Outputs(this);
  }
}

export class Pay1Call__Inputs {
  _call: Pay1Call;

  constructor(call: Pay1Call) {
    this._call = call;
  }

  get principalPayment(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get interestPayment(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Pay1Call__Outputs {
  _call: Pay1Call;

  constructor(call: Pay1Call) {
    this._call = call;
  }

  get value0(): Pay1CallValue0Struct {
    return changetype<Pay1CallValue0Struct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class Pay1CallValue0Struct extends ethereum.Tuple {
  get owedInterestPayment(): BigInt {
    return this[0].toBigInt();
  }

  get accruedInterestPayment(): BigInt {
    return this[1].toBigInt();
  }

  get principalPayment(): BigInt {
    return this[2].toBigInt();
  }

  get additionalBalancePayment(): BigInt {
    return this[3].toBigInt();
  }

  get paymentRemaining(): BigInt {
    return this[4].toBigInt();
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetLimitCall extends ethereum.Call {
  get inputs(): SetLimitCall__Inputs {
    return new SetLimitCall__Inputs(this);
  }

  get outputs(): SetLimitCall__Outputs {
    return new SetLimitCall__Outputs(this);
  }
}

export class SetLimitCall__Inputs {
  _call: SetLimitCall;

  constructor(call: SetLimitCall) {
    this._call = call;
  }

  get newAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLimitCall__Outputs {
  _call: SetLimitCall;

  constructor(call: SetLimitCall) {
    this._call = call;
  }
}

export class SetMaxLimitCall extends ethereum.Call {
  get inputs(): SetMaxLimitCall__Inputs {
    return new SetMaxLimitCall__Inputs(this);
  }

  get outputs(): SetMaxLimitCall__Outputs {
    return new SetMaxLimitCall__Outputs(this);
  }
}

export class SetMaxLimitCall__Inputs {
  _call: SetMaxLimitCall;

  constructor(call: SetMaxLimitCall) {
    this._call = call;
  }

  get newAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxLimitCall__Outputs {
  _call: SetMaxLimitCall;

  constructor(call: SetMaxLimitCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}
