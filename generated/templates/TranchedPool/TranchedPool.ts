// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CreditLineMigrated extends ethereum.Event {
  get params(): CreditLineMigrated__Params {
    return new CreditLineMigrated__Params(this);
  }
}

export class CreditLineMigrated__Params {
  _event: CreditLineMigrated;

  constructor(event: CreditLineMigrated) {
    this._event = event;
  }

  get oldCreditLine(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newCreditLine(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DepositMade extends ethereum.Event {
  get params(): DepositMade__Params {
    return new DepositMade__Params(this);
  }
}

export class DepositMade__Params {
  _event: DepositMade;

  constructor(event: DepositMade) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tranche(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class DrawdownMade extends ethereum.Event {
  get params(): DrawdownMade__Params {
    return new DrawdownMade__Params(this);
  }
}

export class DrawdownMade__Params {
  _event: DrawdownMade;

  constructor(event: DrawdownMade) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DrawdownsPaused extends ethereum.Event {
  get params(): DrawdownsPaused__Params {
    return new DrawdownsPaused__Params(this);
  }
}

export class DrawdownsPaused__Params {
  _event: DrawdownsPaused;

  constructor(event: DrawdownsPaused) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DrawdownsUnpaused extends ethereum.Event {
  get params(): DrawdownsUnpaused__Params {
    return new DrawdownsUnpaused__Params(this);
  }
}

export class DrawdownsUnpaused__Params {
  _event: DrawdownsUnpaused;

  constructor(event: DrawdownsUnpaused) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class EmergencyShutdown extends ethereum.Event {
  get params(): EmergencyShutdown__Params {
    return new EmergencyShutdown__Params(this);
  }
}

export class EmergencyShutdown__Params {
  _event: EmergencyShutdown;

  constructor(event: EmergencyShutdown) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PaymentApplied extends ethereum.Event {
  get params(): PaymentApplied__Params {
    return new PaymentApplied__Params(this);
  }
}

export class PaymentApplied__Params {
  _event: PaymentApplied;

  constructor(event: PaymentApplied) {
    this._event = event;
  }

  get payer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get interest(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get principal(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get remaining(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get reserve(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class ReserveFundsCollected extends ethereum.Event {
  get params(): ReserveFundsCollected__Params {
    return new ReserveFundsCollected__Params(this);
  }
}

export class ReserveFundsCollected__Params {
  _event: ReserveFundsCollected;

  constructor(event: ReserveFundsCollected) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SharePriceUpdated extends ethereum.Event {
  get params(): SharePriceUpdated__Params {
    return new SharePriceUpdated__Params(this);
  }
}

export class SharePriceUpdated__Params {
  _event: SharePriceUpdated;

  constructor(event: SharePriceUpdated) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tranche(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get principalSharePrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get principalDelta(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get interestSharePrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get interestDelta(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class SliceCreated extends ethereum.Event {
  get params(): SliceCreated__Params {
    return new SliceCreated__Params(this);
  }
}

export class SliceCreated__Params {
  _event: SliceCreated;

  constructor(event: SliceCreated) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sliceId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TrancheLocked extends ethereum.Event {
  get params(): TrancheLocked__Params {
    return new TrancheLocked__Params(this);
  }
}

export class TrancheLocked__Params {
  _event: TrancheLocked;

  constructor(event: TrancheLocked) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get trancheId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lockedUntil(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TranchedPoolAssessed extends ethereum.Event {
  get params(): TranchedPoolAssessed__Params {
    return new TranchedPoolAssessed__Params(this);
  }
}

export class TranchedPoolAssessed__Params {
  _event: TranchedPoolAssessed;

  constructor(event: TranchedPoolAssessed) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class WithdrawalMade extends ethereum.Event {
  get params(): WithdrawalMade__Params {
    return new WithdrawalMade__Params(this);
  }
}

export class WithdrawalMade__Params {
  _event: WithdrawalMade;

  constructor(event: WithdrawalMade) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tranche(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get interestWithdrawn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get principalWithdrawn(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TranchedPool__availableToWithdrawResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class TranchedPool__getAmountsOwedResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getInterestOwed(): BigInt {
    return this.value0;
  }

  getInterestAccrued(): BigInt {
    return this.value1;
  }

  getPrincipalOwed(): BigInt {
    return this.value2;
  }
}

export class TranchedPool__getTrancheResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get principalDeposited(): BigInt {
    return this[1].toBigInt();
  }

  get principalSharePrice(): BigInt {
    return this[2].toBigInt();
  }

  get interestSharePrice(): BigInt {
    return this[3].toBigInt();
  }

  get lockedUntil(): BigInt {
    return this[4].toBigInt();
  }
}

export class TranchedPool__payResultValue0Struct extends ethereum.Tuple {
  get owedInterestPayment(): BigInt {
    return this[0].toBigInt();
  }

  get accruedInterestPayment(): BigInt {
    return this[1].toBigInt();
  }

  get principalPayment(): BigInt {
    return this[2].toBigInt();
  }

  get additionalBalancePayment(): BigInt {
    return this[3].toBigInt();
  }

  get paymentRemaining(): BigInt {
    return this[4].toBigInt();
  }
}

export class TranchedPool__pay1ResultValue0Struct extends ethereum.Tuple {
  get owedInterestPayment(): BigInt {
    return this[0].toBigInt();
  }

  get accruedInterestPayment(): BigInt {
    return this[1].toBigInt();
  }

  get principalPayment(): BigInt {
    return this[2].toBigInt();
  }

  get additionalBalancePayment(): BigInt {
    return this[3].toBigInt();
  }

  get paymentRemaining(): BigInt {
    return this[4].toBigInt();
  }
}

export class TranchedPool__poolSlicesResultValue0Struct extends ethereum.Tuple {
  get seniorTranche(): TranchedPool__poolSlicesResultValue0SeniorTrancheStruct {
    return changetype<TranchedPool__poolSlicesResultValue0SeniorTrancheStruct>(
      this[0].toTuple()
    );
  }

  get juniorTranche(): TranchedPool__poolSlicesResultValue0JuniorTrancheStruct {
    return changetype<TranchedPool__poolSlicesResultValue0JuniorTrancheStruct>(
      this[1].toTuple()
    );
  }

  get totalInterestAccrued(): BigInt {
    return this[2].toBigInt();
  }

  get principalDeployed(): BigInt {
    return this[3].toBigInt();
  }
}

export class TranchedPool__poolSlicesResultValue0SeniorTrancheStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get principalDeposited(): BigInt {
    return this[1].toBigInt();
  }

  get principalSharePrice(): BigInt {
    return this[2].toBigInt();
  }

  get interestSharePrice(): BigInt {
    return this[3].toBigInt();
  }

  get lockedUntil(): BigInt {
    return this[4].toBigInt();
  }
}

export class TranchedPool__poolSlicesResultValue0JuniorTrancheStruct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get principalDeposited(): BigInt {
    return this[1].toBigInt();
  }

  get principalSharePrice(): BigInt {
    return this[2].toBigInt();
  }

  get interestSharePrice(): BigInt {
    return this[3].toBigInt();
  }

  get lockedUntil(): BigInt {
    return this[4].toBigInt();
  }
}

export class TranchedPool__withdrawResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class TranchedPool__withdrawMaxResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getInterestWithdrawn(): BigInt {
    return this.value0;
  }

  getPrincipalWithdrawn(): BigInt {
    return this.value1;
  }
}

export class TranchedPool extends ethereum.SmartContract {
  static bind(address: Address): TranchedPool {
    return new TranchedPool("TranchedPool", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  LOCKER_ROLE(): Bytes {
    let result = super.call("LOCKER_ROLE", "LOCKER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_LOCKER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("LOCKER_ROLE", "LOCKER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  NUM_TRANCHES_PER_SLICE(): BigInt {
    let result = super.call(
      "NUM_TRANCHES_PER_SLICE",
      "NUM_TRANCHES_PER_SLICE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_NUM_TRANCHES_PER_SLICE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "NUM_TRANCHES_PER_SLICE",
      "NUM_TRANCHES_PER_SLICE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  OWNER_ROLE(): Bytes {
    let result = super.call("OWNER_ROLE", "OWNER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_OWNER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("OWNER_ROLE", "OWNER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PAUSER_ROLE(): Bytes {
    let result = super.call("PAUSER_ROLE", "PAUSER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_PAUSER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("PAUSER_ROLE", "PAUSER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  SENIOR_ROLE(): Bytes {
    let result = super.call("SENIOR_ROLE", "SENIOR_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_SENIOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("SENIOR_ROLE", "SENIOR_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  allowedUIDTypes(param0: BigInt): BigInt {
    let result = super.call(
      "allowedUIDTypes",
      "allowedUIDTypes(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_allowedUIDTypes(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowedUIDTypes",
      "allowedUIDTypes(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  availableToWithdraw(
    tokenId: BigInt
  ): TranchedPool__availableToWithdrawResult {
    let result = super.call(
      "availableToWithdraw",
      "availableToWithdraw(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return new TranchedPool__availableToWithdrawResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_availableToWithdraw(
    tokenId: BigInt
  ): ethereum.CallResult<TranchedPool__availableToWithdrawResult> {
    let result = super.tryCall(
      "availableToWithdraw",
      "availableToWithdraw(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TranchedPool__availableToWithdrawResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  config(): Address {
    let result = super.call("config", "config():(address)", []);

    return result[0].toAddress();
  }

  try_config(): ethereum.CallResult<Address> {
    let result = super.tryCall("config", "config():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createdAt(): BigInt {
    let result = super.call("createdAt", "createdAt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_createdAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("createdAt", "createdAt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  creditLine(): Address {
    let result = super.call("creditLine", "creditLine():(address)", []);

    return result[0].toAddress();
  }

  try_creditLine(): ethereum.CallResult<Address> {
    let result = super.tryCall("creditLine", "creditLine():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deposit(tranche: BigInt, amount: BigInt): BigInt {
    let result = super.call("deposit", "deposit(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tranche),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_deposit(tranche: BigInt, amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "deposit",
      "deposit(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tranche),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositWithPermit(
    tranche: BigInt,
    amount: BigInt,
    deadline: BigInt,
    v: i32,
    r: Bytes,
    s: Bytes
  ): BigInt {
    let result = super.call(
      "depositWithPermit",
      "depositWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tranche),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );

    return result[0].toBigInt();
  }

  try_depositWithPermit(
    tranche: BigInt,
    amount: BigInt,
    deadline: BigInt,
    v: i32,
    r: Bytes,
    s: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositWithPermit",
      "depositWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tranche),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  drawdownsPaused(): boolean {
    let result = super.call("drawdownsPaused", "drawdownsPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_drawdownsPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "drawdownsPaused",
      "drawdownsPaused():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  fundableAt(): BigInt {
    let result = super.call("fundableAt", "fundableAt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_fundableAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("fundableAt", "fundableAt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllowedUIDTypes(): Array<BigInt> {
    let result = super.call(
      "getAllowedUIDTypes",
      "getAllowedUIDTypes():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getAllowedUIDTypes(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAllowedUIDTypes",
      "getAllowedUIDTypes():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAmountsOwed(timestamp: BigInt): TranchedPool__getAmountsOwedResult {
    let result = super.call(
      "getAmountsOwed",
      "getAmountsOwed(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );

    return new TranchedPool__getAmountsOwedResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getAmountsOwed(
    timestamp: BigInt
  ): ethereum.CallResult<TranchedPool__getAmountsOwedResult> {
    let result = super.tryCall(
      "getAmountsOwed",
      "getAmountsOwed(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TranchedPool__getAmountsOwedResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTranche(tranche: BigInt): TranchedPool__getTrancheResultValue0Struct {
    let result = super.call(
      "getTranche",
      "getTranche(uint256):((uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(tranche)]
    );

    return changetype<TranchedPool__getTrancheResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getTranche(
    tranche: BigInt
  ): ethereum.CallResult<TranchedPool__getTrancheResultValue0Struct> {
    let result = super.tryCall(
      "getTranche",
      "getTranche(uint256):((uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(tranche)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<TranchedPool__getTrancheResultValue0Struct>(value[0].toTuple())
    );
  }

  getVersion(): Array<i32> {
    let result = super.call("getVersion", "getVersion():(uint8[3])", []);

    return result[0].toI32Array();
  }

  try_getVersion(): ethereum.CallResult<Array<i32>> {
    let result = super.tryCall("getVersion", "getVersion():(uint8[3])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32Array());
  }

  hasAllowedUID(sender: Address): boolean {
    let result = super.call("hasAllowedUID", "hasAllowedUID(address):(bool)", [
      ethereum.Value.fromAddress(sender)
    ]);

    return result[0].toBoolean();
  }

  try_hasAllowedUID(sender: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasAllowedUID",
      "hasAllowedUID(address):(bool)",
      [ethereum.Value.fromAddress(sender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAdmin(): boolean {
    let result = super.call("isAdmin", "isAdmin():(bool)", []);

    return result[0].toBoolean();
  }

  try_isAdmin(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAdmin", "isAdmin():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  juniorFeePercent(): BigInt {
    let result = super.call(
      "juniorFeePercent",
      "juniorFeePercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_juniorFeePercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "juniorFeePercent",
      "juniorFeePercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numSlices(): BigInt {
    let result = super.call("numSlices", "numSlices():(uint256)", []);

    return result[0].toBigInt();
  }

  try_numSlices(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("numSlices", "numSlices():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pay(amount: BigInt): TranchedPool__payResultValue0Struct {
    let result = super.call(
      "pay",
      "pay(uint256):((uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return changetype<TranchedPool__payResultValue0Struct>(result[0].toTuple());
  }

  try_pay(
    amount: BigInt
  ): ethereum.CallResult<TranchedPool__payResultValue0Struct> {
    let result = super.tryCall(
      "pay",
      "pay(uint256):((uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<TranchedPool__payResultValue0Struct>(value[0].toTuple())
    );
  }

  pay1(
    principalAmount: BigInt,
    interestAmount: BigInt
  ): TranchedPool__pay1ResultValue0Struct {
    let result = super.call(
      "pay",
      "pay(uint256,uint256):((uint256,uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(principalAmount),
        ethereum.Value.fromUnsignedBigInt(interestAmount)
      ]
    );

    return changetype<TranchedPool__pay1ResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_pay1(
    principalAmount: BigInt,
    interestAmount: BigInt
  ): ethereum.CallResult<TranchedPool__pay1ResultValue0Struct> {
    let result = super.tryCall(
      "pay",
      "pay(uint256,uint256):((uint256,uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(principalAmount),
        ethereum.Value.fromUnsignedBigInt(interestAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<TranchedPool__pay1ResultValue0Struct>(value[0].toTuple())
    );
  }

  poolSlices(index: BigInt): TranchedPool__poolSlicesResultValue0Struct {
    let result = super.call(
      "poolSlices",
      "poolSlices(uint256):(((uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256),uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return changetype<TranchedPool__poolSlicesResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_poolSlices(
    index: BigInt
  ): ethereum.CallResult<TranchedPool__poolSlicesResultValue0Struct> {
    let result = super.tryCall(
      "poolSlices",
      "poolSlices(uint256):(((uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256,uint256),uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<TranchedPool__poolSlicesResultValue0Struct>(value[0].toTuple())
    );
  }

  totalDeployed(): BigInt {
    let result = super.call("totalDeployed", "totalDeployed():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalDeployed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDeployed",
      "totalDeployed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalJuniorDeposits(): BigInt {
    let result = super.call(
      "totalJuniorDeposits",
      "totalJuniorDeposits():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalJuniorDeposits(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalJuniorDeposits",
      "totalJuniorDeposits():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdraw(tokenId: BigInt, amount: BigInt): TranchedPool__withdrawResult {
    let result = super.call(
      "withdraw",
      "withdraw(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return new TranchedPool__withdrawResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_withdraw(
    tokenId: BigInt,
    amount: BigInt
  ): ethereum.CallResult<TranchedPool__withdrawResult> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TranchedPool__withdrawResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  withdrawMax(tokenId: BigInt): TranchedPool__withdrawMaxResult {
    let result = super.call(
      "withdrawMax",
      "withdrawMax(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return new TranchedPool__withdrawMaxResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_withdrawMax(
    tokenId: BigInt
  ): ethereum.CallResult<TranchedPool__withdrawMaxResult> {
    let result = super.tryCall(
      "withdrawMax",
      "withdrawMax(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TranchedPool__withdrawMaxResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }
}

export class __BaseUpgradeablePausable__initCall extends ethereum.Call {
  get inputs(): __BaseUpgradeablePausable__initCall__Inputs {
    return new __BaseUpgradeablePausable__initCall__Inputs(this);
  }

  get outputs(): __BaseUpgradeablePausable__initCall__Outputs {
    return new __BaseUpgradeablePausable__initCall__Outputs(this);
  }
}

export class __BaseUpgradeablePausable__initCall__Inputs {
  _call: __BaseUpgradeablePausable__initCall;

  constructor(call: __BaseUpgradeablePausable__initCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class __BaseUpgradeablePausable__initCall__Outputs {
  _call: __BaseUpgradeablePausable__initCall;

  constructor(call: __BaseUpgradeablePausable__initCall) {
    this._call = call;
  }
}

export class __PauserPausable__initCall extends ethereum.Call {
  get inputs(): __PauserPausable__initCall__Inputs {
    return new __PauserPausable__initCall__Inputs(this);
  }

  get outputs(): __PauserPausable__initCall__Outputs {
    return new __PauserPausable__initCall__Outputs(this);
  }
}

export class __PauserPausable__initCall__Inputs {
  _call: __PauserPausable__initCall;

  constructor(call: __PauserPausable__initCall) {
    this._call = call;
  }
}

export class __PauserPausable__initCall__Outputs {
  _call: __PauserPausable__initCall;

  constructor(call: __PauserPausable__initCall) {
    this._call = call;
  }
}

export class AssessCall extends ethereum.Call {
  get inputs(): AssessCall__Inputs {
    return new AssessCall__Inputs(this);
  }

  get outputs(): AssessCall__Outputs {
    return new AssessCall__Outputs(this);
  }
}

export class AssessCall__Inputs {
  _call: AssessCall;

  constructor(call: AssessCall) {
    this._call = call;
  }
}

export class AssessCall__Outputs {
  _call: AssessCall;

  constructor(call: AssessCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get tranche(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositWithPermitCall extends ethereum.Call {
  get inputs(): DepositWithPermitCall__Inputs {
    return new DepositWithPermitCall__Inputs(this);
  }

  get outputs(): DepositWithPermitCall__Outputs {
    return new DepositWithPermitCall__Outputs(this);
  }
}

export class DepositWithPermitCall__Inputs {
  _call: DepositWithPermitCall;

  constructor(call: DepositWithPermitCall) {
    this._call = call;
  }

  get tranche(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class DepositWithPermitCall__Outputs {
  _call: DepositWithPermitCall;

  constructor(call: DepositWithPermitCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DrawdownCall extends ethereum.Call {
  get inputs(): DrawdownCall__Inputs {
    return new DrawdownCall__Inputs(this);
  }

  get outputs(): DrawdownCall__Outputs {
    return new DrawdownCall__Outputs(this);
  }
}

export class DrawdownCall__Inputs {
  _call: DrawdownCall;

  constructor(call: DrawdownCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DrawdownCall__Outputs {
  _call: DrawdownCall;

  constructor(call: DrawdownCall) {
    this._call = call;
  }
}

export class EmergencyShutdownCall extends ethereum.Call {
  get inputs(): EmergencyShutdownCall__Inputs {
    return new EmergencyShutdownCall__Inputs(this);
  }

  get outputs(): EmergencyShutdownCall__Outputs {
    return new EmergencyShutdownCall__Outputs(this);
  }
}

export class EmergencyShutdownCall__Inputs {
  _call: EmergencyShutdownCall;

  constructor(call: EmergencyShutdownCall) {
    this._call = call;
  }
}

export class EmergencyShutdownCall__Outputs {
  _call: EmergencyShutdownCall;

  constructor(call: EmergencyShutdownCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _config(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _juniorFeePercent(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _limit(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _interestApr(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _schedule(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _lateFeeApr(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _fundableAt(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _allowedUIDTypes(): Array<BigInt> {
    return this._call.inputValues[8].value.toBigIntArray();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeNextSliceCall extends ethereum.Call {
  get inputs(): InitializeNextSliceCall__Inputs {
    return new InitializeNextSliceCall__Inputs(this);
  }

  get outputs(): InitializeNextSliceCall__Outputs {
    return new InitializeNextSliceCall__Outputs(this);
  }
}

export class InitializeNextSliceCall__Inputs {
  _call: InitializeNextSliceCall;

  constructor(call: InitializeNextSliceCall) {
    this._call = call;
  }

  get _fundableAt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class InitializeNextSliceCall__Outputs {
  _call: InitializeNextSliceCall;

  constructor(call: InitializeNextSliceCall) {
    this._call = call;
  }
}

export class LockJuniorCapitalCall extends ethereum.Call {
  get inputs(): LockJuniorCapitalCall__Inputs {
    return new LockJuniorCapitalCall__Inputs(this);
  }

  get outputs(): LockJuniorCapitalCall__Outputs {
    return new LockJuniorCapitalCall__Outputs(this);
  }
}

export class LockJuniorCapitalCall__Inputs {
  _call: LockJuniorCapitalCall;

  constructor(call: LockJuniorCapitalCall) {
    this._call = call;
  }
}

export class LockJuniorCapitalCall__Outputs {
  _call: LockJuniorCapitalCall;

  constructor(call: LockJuniorCapitalCall) {
    this._call = call;
  }
}

export class LockPoolCall extends ethereum.Call {
  get inputs(): LockPoolCall__Inputs {
    return new LockPoolCall__Inputs(this);
  }

  get outputs(): LockPoolCall__Outputs {
    return new LockPoolCall__Outputs(this);
  }
}

export class LockPoolCall__Inputs {
  _call: LockPoolCall;

  constructor(call: LockPoolCall) {
    this._call = call;
  }
}

export class LockPoolCall__Outputs {
  _call: LockPoolCall;

  constructor(call: LockPoolCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseDrawdownsCall extends ethereum.Call {
  get inputs(): PauseDrawdownsCall__Inputs {
    return new PauseDrawdownsCall__Inputs(this);
  }

  get outputs(): PauseDrawdownsCall__Outputs {
    return new PauseDrawdownsCall__Outputs(this);
  }
}

export class PauseDrawdownsCall__Inputs {
  _call: PauseDrawdownsCall;

  constructor(call: PauseDrawdownsCall) {
    this._call = call;
  }
}

export class PauseDrawdownsCall__Outputs {
  _call: PauseDrawdownsCall;

  constructor(call: PauseDrawdownsCall) {
    this._call = call;
  }
}

export class PayCall extends ethereum.Call {
  get inputs(): PayCall__Inputs {
    return new PayCall__Inputs(this);
  }

  get outputs(): PayCall__Outputs {
    return new PayCall__Outputs(this);
  }
}

export class PayCall__Inputs {
  _call: PayCall;

  constructor(call: PayCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PayCall__Outputs {
  _call: PayCall;

  constructor(call: PayCall) {
    this._call = call;
  }

  get value0(): PayCallValue0Struct {
    return changetype<PayCallValue0Struct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class PayCallValue0Struct extends ethereum.Tuple {
  get owedInterestPayment(): BigInt {
    return this[0].toBigInt();
  }

  get accruedInterestPayment(): BigInt {
    return this[1].toBigInt();
  }

  get principalPayment(): BigInt {
    return this[2].toBigInt();
  }

  get additionalBalancePayment(): BigInt {
    return this[3].toBigInt();
  }

  get paymentRemaining(): BigInt {
    return this[4].toBigInt();
  }
}

export class Pay1Call extends ethereum.Call {
  get inputs(): Pay1Call__Inputs {
    return new Pay1Call__Inputs(this);
  }

  get outputs(): Pay1Call__Outputs {
    return new Pay1Call__Outputs(this);
  }
}

export class Pay1Call__Inputs {
  _call: Pay1Call;

  constructor(call: Pay1Call) {
    this._call = call;
  }

  get principalAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get interestAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Pay1Call__Outputs {
  _call: Pay1Call;

  constructor(call: Pay1Call) {
    this._call = call;
  }

  get value0(): Pay1CallValue0Struct {
    return changetype<Pay1CallValue0Struct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class Pay1CallValue0Struct extends ethereum.Tuple {
  get owedInterestPayment(): BigInt {
    return this[0].toBigInt();
  }

  get accruedInterestPayment(): BigInt {
    return this[1].toBigInt();
  }

  get principalPayment(): BigInt {
    return this[2].toBigInt();
  }

  get additionalBalancePayment(): BigInt {
    return this[3].toBigInt();
  }

  get paymentRemaining(): BigInt {
    return this[4].toBigInt();
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetAllowedUIDTypesCall extends ethereum.Call {
  get inputs(): SetAllowedUIDTypesCall__Inputs {
    return new SetAllowedUIDTypesCall__Inputs(this);
  }

  get outputs(): SetAllowedUIDTypesCall__Outputs {
    return new SetAllowedUIDTypesCall__Outputs(this);
  }
}

export class SetAllowedUIDTypesCall__Inputs {
  _call: SetAllowedUIDTypesCall;

  constructor(call: SetAllowedUIDTypesCall) {
    this._call = call;
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetAllowedUIDTypesCall__Outputs {
  _call: SetAllowedUIDTypesCall;

  constructor(call: SetAllowedUIDTypesCall) {
    this._call = call;
  }
}

export class SetFundableAtCall extends ethereum.Call {
  get inputs(): SetFundableAtCall__Inputs {
    return new SetFundableAtCall__Inputs(this);
  }

  get outputs(): SetFundableAtCall__Outputs {
    return new SetFundableAtCall__Outputs(this);
  }
}

export class SetFundableAtCall__Inputs {
  _call: SetFundableAtCall;

  constructor(call: SetFundableAtCall) {
    this._call = call;
  }

  get newFundableAt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFundableAtCall__Outputs {
  _call: SetFundableAtCall;

  constructor(call: SetFundableAtCall) {
    this._call = call;
  }
}

export class SetLimitCall extends ethereum.Call {
  get inputs(): SetLimitCall__Inputs {
    return new SetLimitCall__Inputs(this);
  }

  get outputs(): SetLimitCall__Outputs {
    return new SetLimitCall__Outputs(this);
  }
}

export class SetLimitCall__Inputs {
  _call: SetLimitCall;

  constructor(call: SetLimitCall) {
    this._call = call;
  }

  get newAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLimitCall__Outputs {
  _call: SetLimitCall;

  constructor(call: SetLimitCall) {
    this._call = call;
  }
}

export class SetMaxLimitCall extends ethereum.Call {
  get inputs(): SetMaxLimitCall__Inputs {
    return new SetMaxLimitCall__Inputs(this);
  }

  get outputs(): SetMaxLimitCall__Outputs {
    return new SetMaxLimitCall__Outputs(this);
  }
}

export class SetMaxLimitCall__Inputs {
  _call: SetMaxLimitCall;

  constructor(call: SetMaxLimitCall) {
    this._call = call;
  }

  get newAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxLimitCall__Outputs {
  _call: SetMaxLimitCall;

  constructor(call: SetMaxLimitCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseDrawdownsCall extends ethereum.Call {
  get inputs(): UnpauseDrawdownsCall__Inputs {
    return new UnpauseDrawdownsCall__Inputs(this);
  }

  get outputs(): UnpauseDrawdownsCall__Outputs {
    return new UnpauseDrawdownsCall__Outputs(this);
  }
}

export class UnpauseDrawdownsCall__Inputs {
  _call: UnpauseDrawdownsCall;

  constructor(call: UnpauseDrawdownsCall) {
    this._call = call;
  }
}

export class UnpauseDrawdownsCall__Outputs {
  _call: UnpauseDrawdownsCall;

  constructor(call: UnpauseDrawdownsCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class WithdrawMaxCall extends ethereum.Call {
  get inputs(): WithdrawMaxCall__Inputs {
    return new WithdrawMaxCall__Inputs(this);
  }

  get outputs(): WithdrawMaxCall__Outputs {
    return new WithdrawMaxCall__Outputs(this);
  }
}

export class WithdrawMaxCall__Inputs {
  _call: WithdrawMaxCall;

  constructor(call: WithdrawMaxCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawMaxCall__Outputs {
  _call: WithdrawMaxCall;

  constructor(call: WithdrawMaxCall) {
    this._call = call;
  }

  get interestWithdrawn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get principalWithdrawn(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class WithdrawMultipleCall extends ethereum.Call {
  get inputs(): WithdrawMultipleCall__Inputs {
    return new WithdrawMultipleCall__Inputs(this);
  }

  get outputs(): WithdrawMultipleCall__Outputs {
    return new WithdrawMultipleCall__Outputs(this);
  }
}

export class WithdrawMultipleCall__Inputs {
  _call: WithdrawMultipleCall;

  constructor(call: WithdrawMultipleCall) {
    this._call = call;
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class WithdrawMultipleCall__Outputs {
  _call: WithdrawMultipleCall;

  constructor(call: WithdrawMultipleCall) {
    this._call = call;
  }
}
