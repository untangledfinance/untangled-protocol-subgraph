// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Schedule extends ethereum.SmartContract {
  static bind(address: Address): Schedule {
    return new Schedule("Schedule", address);
  }

  gracePrincipalPeriods(): BigInt {
    let result = super.call(
      "gracePrincipalPeriods",
      "gracePrincipalPeriods():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_gracePrincipalPeriods(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "gracePrincipalPeriods",
      "gracePrincipalPeriods():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  interestPeriodAt(startTime: BigInt, timestamp: BigInt): BigInt {
    let result = super.call(
      "interestPeriodAt",
      "interestPeriodAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_interestPeriodAt(
    startTime: BigInt,
    timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestPeriodAt",
      "interestPeriodAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextDueTimeAt(startTime: BigInt, timestamp: BigInt): BigInt {
    let result = super.call(
      "nextDueTimeAt",
      "nextDueTimeAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_nextDueTimeAt(
    startTime: BigInt,
    timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextDueTimeAt",
      "nextDueTimeAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextInterestDueTimeAt(startTime: BigInt, timestamp: BigInt): BigInt {
    let result = super.call(
      "nextInterestDueTimeAt",
      "nextInterestDueTimeAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_nextInterestDueTimeAt(
    startTime: BigInt,
    timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextInterestDueTimeAt",
      "nextInterestDueTimeAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextPrincipalDueTimeAt(startTime: BigInt, timestamp: BigInt): BigInt {
    let result = super.call(
      "nextPrincipalDueTimeAt",
      "nextPrincipalDueTimeAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_nextPrincipalDueTimeAt(
    startTime: BigInt,
    timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextPrincipalDueTimeAt",
      "nextPrincipalDueTimeAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  periodAt(startTime: BigInt, timestamp: BigInt): BigInt {
    let result = super.call("periodAt", "periodAt(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(startTime),
      ethereum.Value.fromUnsignedBigInt(timestamp)
    ]);

    return result[0].toBigInt();
  }

  try_periodAt(
    startTime: BigInt,
    timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "periodAt",
      "periodAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  periodEndTime(startTime: BigInt, period: BigInt): BigInt {
    let result = super.call(
      "periodEndTime",
      "periodEndTime(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(period)
      ]
    );

    return result[0].toBigInt();
  }

  try_periodEndTime(
    startTime: BigInt,
    period: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "periodEndTime",
      "periodEndTime(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(period)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  periodMapper(): Address {
    let result = super.call("periodMapper", "periodMapper():(address)", []);

    return result[0].toAddress();
  }

  try_periodMapper(): ethereum.CallResult<Address> {
    let result = super.tryCall("periodMapper", "periodMapper():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  periodsInTerm(): BigInt {
    let result = super.call("periodsInTerm", "periodsInTerm():(uint256)", []);

    return result[0].toBigInt();
  }

  try_periodsInTerm(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "periodsInTerm",
      "periodsInTerm():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  periodsPerInterestPeriod(): BigInt {
    let result = super.call(
      "periodsPerInterestPeriod",
      "periodsPerInterestPeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_periodsPerInterestPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "periodsPerInterestPeriod",
      "periodsPerInterestPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  periodsPerPrincipalPeriod(): BigInt {
    let result = super.call(
      "periodsPerPrincipalPeriod",
      "periodsPerPrincipalPeriod():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_periodsPerPrincipalPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "periodsPerPrincipalPeriod",
      "periodsPerPrincipalPeriod():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previousDueTimeAt(startTime: BigInt, timestamp: BigInt): BigInt {
    let result = super.call(
      "previousDueTimeAt",
      "previousDueTimeAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_previousDueTimeAt(
    startTime: BigInt,
    timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previousDueTimeAt",
      "previousDueTimeAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previousInterestDueTimeAt(startTime: BigInt, timestamp: BigInt): BigInt {
    let result = super.call(
      "previousInterestDueTimeAt",
      "previousInterestDueTimeAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_previousInterestDueTimeAt(
    startTime: BigInt,
    timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previousInterestDueTimeAt",
      "previousInterestDueTimeAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  previousPrincipalDueTimeAt(startTime: BigInt, timestamp: BigInt): BigInt {
    let result = super.call(
      "previousPrincipalDueTimeAt",
      "previousPrincipalDueTimeAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_previousPrincipalDueTimeAt(
    startTime: BigInt,
    timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "previousPrincipalDueTimeAt",
      "previousPrincipalDueTimeAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  principalPeriodAt(startTime: BigInt, timestamp: BigInt): BigInt {
    let result = super.call(
      "principalPeriodAt",
      "principalPeriodAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_principalPeriodAt(
    startTime: BigInt,
    timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "principalPeriodAt",
      "principalPeriodAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  termEndTime(startTime: BigInt): BigInt {
    let result = super.call("termEndTime", "termEndTime(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(startTime)
    ]);

    return result[0].toBigInt();
  }

  try_termEndTime(startTime: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "termEndTime",
      "termEndTime(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(startTime)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  termStartTime(startTime: BigInt): BigInt {
    let result = super.call(
      "termStartTime",
      "termStartTime(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(startTime)]
    );

    return result[0].toBigInt();
  }

  try_termStartTime(startTime: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "termStartTime",
      "termStartTime(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(startTime)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalInterestPeriods(): BigInt {
    let result = super.call(
      "totalInterestPeriods",
      "totalInterestPeriods():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalInterestPeriods(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalInterestPeriods",
      "totalInterestPeriods():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalPrincipalPeriods(): BigInt {
    let result = super.call(
      "totalPrincipalPeriods",
      "totalPrincipalPeriods():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalPrincipalPeriods(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalPrincipalPeriods",
      "totalPrincipalPeriods():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withinPrincipalGracePeriodAt(startTime: BigInt, timestamp: BigInt): boolean {
    let result = super.call(
      "withinPrincipalGracePeriodAt",
      "withinPrincipalGracePeriodAt(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );

    return result[0].toBoolean();
  }

  try_withinPrincipalGracePeriodAt(
    startTime: BigInt,
    timestamp: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "withinPrincipalGracePeriodAt",
      "withinPrincipalGracePeriodAt(uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(startTime),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _periodMapper(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _periodsInTerm(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _periodsPerPrincipalPeriod(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _periodsPerInterestPeriod(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _gracePrincipalPeriods(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
