// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class RewardsClaimed extends ethereum.Event {
  get params(): RewardsClaimed__Params {
    return new RewardsClaimed__Params(this);
  }
}

export class RewardsClaimed__Params {
  _event: RewardsClaimed;

  constructor(event: RewardsClaimed) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rewards(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MembershipDirector__currentScoreResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getEligibleScore(): BigInt {
    return this.value0;
  }

  getTotalScore(): BigInt {
    return this.value1;
  }
}

export class MembershipDirector__totalMemberScoresResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getEligibleTotal(): BigInt {
    return this.value0;
  }

  getNextEpochTotal(): BigInt {
    return this.value1;
  }
}

export class MembershipDirector extends ethereum.SmartContract {
  static bind(address: Address): MembershipDirector {
    return new MembershipDirector("MembershipDirector", address);
  }

  calculateMembershipScore(gfi: BigInt, capital: BigInt): BigInt {
    let result = super.call(
      "calculateMembershipScore",
      "calculateMembershipScore(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(gfi),
        ethereum.Value.fromUnsignedBigInt(capital)
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateMembershipScore(
    gfi: BigInt,
    capital: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateMembershipScore",
      "calculateMembershipScore(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(gfi),
        ethereum.Value.fromUnsignedBigInt(capital)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimableRewards(owner: Address): BigInt {
    let result = super.call(
      "claimableRewards",
      "claimableRewards(address):(uint256)",
      [ethereum.Value.fromAddress(owner)]
    );

    return result[0].toBigInt();
  }

  try_claimableRewards(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimableRewards",
      "claimableRewards(address):(uint256)",
      [ethereum.Value.fromAddress(owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collectRewards(owner: Address): BigInt {
    let result = super.call(
      "collectRewards",
      "collectRewards(address):(uint256)",
      [ethereum.Value.fromAddress(owner)]
    );

    return result[0].toBigInt();
  }

  try_collectRewards(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collectRewards",
      "collectRewards(address):(uint256)",
      [ethereum.Value.fromAddress(owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  consumeHoldingsAdjustment(owner: Address): BigInt {
    let result = super.call(
      "consumeHoldingsAdjustment",
      "consumeHoldingsAdjustment(address):(uint256)",
      [ethereum.Value.fromAddress(owner)]
    );

    return result[0].toBigInt();
  }

  try_consumeHoldingsAdjustment(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "consumeHoldingsAdjustment",
      "consumeHoldingsAdjustment(address):(uint256)",
      [ethereum.Value.fromAddress(owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentScore(owner: Address): MembershipDirector__currentScoreResult {
    let result = super.call(
      "currentScore",
      "currentScore(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(owner)]
    );

    return new MembershipDirector__currentScoreResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_currentScore(
    owner: Address
  ): ethereum.CallResult<MembershipDirector__currentScoreResult> {
    let result = super.tryCall(
      "currentScore",
      "currentScore(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MembershipDirector__currentScoreResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  estimateMemberScore(
    memberAddress: Address,
    gfi: BigInt,
    capital: BigInt
  ): BigInt {
    let result = super.call(
      "estimateMemberScore",
      "estimateMemberScore(address,int256,int256):(uint256)",
      [
        ethereum.Value.fromAddress(memberAddress),
        ethereum.Value.fromSignedBigInt(gfi),
        ethereum.Value.fromSignedBigInt(capital)
      ]
    );

    return result[0].toBigInt();
  }

  try_estimateMemberScore(
    memberAddress: Address,
    gfi: BigInt,
    capital: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimateMemberScore",
      "estimateMemberScore(address,int256,int256):(uint256)",
      [
        ethereum.Value.fromAddress(memberAddress),
        ethereum.Value.fromSignedBigInt(gfi),
        ethereum.Value.fromSignedBigInt(capital)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalMemberScores(): MembershipDirector__totalMemberScoresResult {
    let result = super.call(
      "totalMemberScores",
      "totalMemberScores():(uint256,uint256)",
      []
    );

    return new MembershipDirector__totalMemberScoresResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_totalMemberScores(): ethereum.CallResult<
    MembershipDirector__totalMemberScoresResult
  > {
    let result = super.tryCall(
      "totalMemberScores",
      "totalMemberScores():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MembershipDirector__totalMemberScoresResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _context(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CollectRewardsCall extends ethereum.Call {
  get inputs(): CollectRewardsCall__Inputs {
    return new CollectRewardsCall__Inputs(this);
  }

  get outputs(): CollectRewardsCall__Outputs {
    return new CollectRewardsCall__Outputs(this);
  }
}

export class CollectRewardsCall__Inputs {
  _call: CollectRewardsCall;

  constructor(call: CollectRewardsCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CollectRewardsCall__Outputs {
  _call: CollectRewardsCall;

  constructor(call: CollectRewardsCall) {
    this._call = call;
  }

  get rewards(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ConsumeHoldingsAdjustmentCall extends ethereum.Call {
  get inputs(): ConsumeHoldingsAdjustmentCall__Inputs {
    return new ConsumeHoldingsAdjustmentCall__Inputs(this);
  }

  get outputs(): ConsumeHoldingsAdjustmentCall__Outputs {
    return new ConsumeHoldingsAdjustmentCall__Outputs(this);
  }
}

export class ConsumeHoldingsAdjustmentCall__Inputs {
  _call: ConsumeHoldingsAdjustmentCall;

  constructor(call: ConsumeHoldingsAdjustmentCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConsumeHoldingsAdjustmentCall__Outputs {
  _call: ConsumeHoldingsAdjustmentCall;

  constructor(call: ConsumeHoldingsAdjustmentCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class FinalizeEpochsCall extends ethereum.Call {
  get inputs(): FinalizeEpochsCall__Inputs {
    return new FinalizeEpochsCall__Inputs(this);
  }

  get outputs(): FinalizeEpochsCall__Outputs {
    return new FinalizeEpochsCall__Outputs(this);
  }
}

export class FinalizeEpochsCall__Inputs {
  _call: FinalizeEpochsCall;

  constructor(call: FinalizeEpochsCall) {
    this._call = call;
  }
}

export class FinalizeEpochsCall__Outputs {
  _call: FinalizeEpochsCall;

  constructor(call: FinalizeEpochsCall) {
    this._call = call;
  }
}
