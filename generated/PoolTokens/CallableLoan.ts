// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CallRequestSubmitted extends ethereum.Event {
  get params(): CallRequestSubmitted__Params {
    return new CallRequestSubmitted__Params(this);
  }
}

export class CallRequestSubmitted__Params {
  _event: CallRequestSubmitted;

  constructor(event: CallRequestSubmitted) {
    this._event = event;
  }

  get originalTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get callRequestedTokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get remainingTokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get callAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class DepositMade extends ethereum.Event {
  get params(): DepositMade__Params {
    return new DepositMade__Params(this);
  }
}

export class DepositMade__Params {
  _event: DepositMade;

  constructor(event: DepositMade) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tranche(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class DepositsLocked extends ethereum.Event {
  get params(): DepositsLocked__Params {
    return new DepositsLocked__Params(this);
  }
}

export class DepositsLocked__Params {
  _event: DepositsLocked;

  constructor(event: DepositsLocked) {
    this._event = event;
  }

  get loan(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DrawdownMade extends ethereum.Event {
  get params(): DrawdownMade__Params {
    return new DrawdownMade__Params(this);
  }
}

export class DrawdownMade__Params {
  _event: DrawdownMade;

  constructor(event: DrawdownMade) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DrawdownsPaused extends ethereum.Event {
  get params(): DrawdownsPaused__Params {
    return new DrawdownsPaused__Params(this);
  }
}

export class DrawdownsPaused__Params {
  _event: DrawdownsPaused;

  constructor(event: DrawdownsPaused) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DrawdownsUnpaused extends ethereum.Event {
  get params(): DrawdownsUnpaused__Params {
    return new DrawdownsUnpaused__Params(this);
  }
}

export class DrawdownsUnpaused__Params {
  _event: DrawdownsUnpaused;

  constructor(event: DrawdownsUnpaused) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class EmergencyShutdown extends ethereum.Event {
  get params(): EmergencyShutdown__Params {
    return new EmergencyShutdown__Params(this);
  }
}

export class EmergencyShutdown__Params {
  _event: EmergencyShutdown;

  constructor(event: EmergencyShutdown) {
    this._event = event;
  }

  get pool(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PaymentApplied extends ethereum.Event {
  get params(): PaymentApplied__Params {
    return new PaymentApplied__Params(this);
  }
}

export class PaymentApplied__Params {
  _event: PaymentApplied;

  constructor(event: PaymentApplied) {
    this._event = event;
  }

  get payer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get interest(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get principal(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get remaining(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get reserve(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class ReserveFundsCollected extends ethereum.Event {
  get params(): ReserveFundsCollected__Params {
    return new ReserveFundsCollected__Params(this);
  }
}

export class ReserveFundsCollected__Params {
  _event: ReserveFundsCollected;

  constructor(event: ReserveFundsCollected) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class WithdrawalMade extends ethereum.Event {
  get params(): WithdrawalMade__Params {
    return new WithdrawalMade__Params(this);
  }
}

export class WithdrawalMade__Params {
  _event: WithdrawalMade;

  constructor(event: WithdrawalMade) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tranche(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get interestWithdrawn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get principalWithdrawn(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class CallableLoan__availableToWithdrawResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class CallableLoan__getAmountsOwedResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getReturnedInterestOwed(): BigInt {
    return this.value0;
  }

  getReturnedInterestAccrued(): BigInt {
    return this.value1;
  }

  getReturnedPrincipalOwed(): BigInt {
    return this.value2;
  }
}

export class CallableLoan__getCallRequestPeriodResultValue0Struct extends ethereum.Tuple {
  get principalDeposited(): BigInt {
    return this[0].toBigInt();
  }

  get principalPaid(): BigInt {
    return this[1].toBigInt();
  }

  get principalReserved(): BigInt {
    return this[2].toBigInt();
  }

  get interestPaid(): BigInt {
    return this[3].toBigInt();
  }
}

export class CallableLoan__getUncalledCapitalInfoResultValue0Struct extends ethereum.Tuple {
  get principalDeposited(): BigInt {
    return this[0].toBigInt();
  }

  get principalPaid(): BigInt {
    return this[1].toBigInt();
  }

  get principalReserved(): BigInt {
    return this[2].toBigInt();
  }

  get interestPaid(): BigInt {
    return this[3].toBigInt();
  }
}

export class CallableLoan__payResultValue0Struct extends ethereum.Tuple {
  get owedInterestPayment(): BigInt {
    return this[0].toBigInt();
  }

  get accruedInterestPayment(): BigInt {
    return this[1].toBigInt();
  }

  get principalPayment(): BigInt {
    return this[2].toBigInt();
  }

  get additionalBalancePayment(): BigInt {
    return this[3].toBigInt();
  }

  get paymentRemaining(): BigInt {
    return this[4].toBigInt();
  }
}

export class CallableLoan__pay1ResultValue0Struct extends ethereum.Tuple {
  get owedInterestPayment(): BigInt {
    return this[0].toBigInt();
  }

  get accruedInterestPayment(): BigInt {
    return this[1].toBigInt();
  }

  get principalPayment(): BigInt {
    return this[2].toBigInt();
  }

  get additionalBalancePayment(): BigInt {
    return this[3].toBigInt();
  }

  get paymentRemaining(): BigInt {
    return this[4].toBigInt();
  }
}

export class CallableLoan__submitCallResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getCallRequestedTokenId(): BigInt {
    return this.value0;
  }

  getRemainingTokenId(): BigInt {
    return this.value1;
  }
}

export class CallableLoan__withdrawResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class CallableLoan__withdrawMaxResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getInterestWithdrawn(): BigInt {
    return this.value0;
  }

  getPrincipalWithdrawn(): BigInt {
    return this.value1;
  }
}

export class CallableLoan extends ethereum.SmartContract {
  static bind(address: Address): CallableLoan {
    return new CallableLoan("CallableLoan", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  LOCKER_ROLE(): Bytes {
    let result = super.call("LOCKER_ROLE", "LOCKER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_LOCKER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("LOCKER_ROLE", "LOCKER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  OWNER_ROLE(): Bytes {
    let result = super.call("OWNER_ROLE", "OWNER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_OWNER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("OWNER_ROLE", "OWNER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PAUSER_ROLE(): Bytes {
    let result = super.call("PAUSER_ROLE", "PAUSER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_PAUSER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("PAUSER_ROLE", "PAUSER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  SPLIT_TOKEN_DUST_THRESHOLD(): BigInt {
    let result = super.call(
      "SPLIT_TOKEN_DUST_THRESHOLD",
      "SPLIT_TOKEN_DUST_THRESHOLD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_SPLIT_TOKEN_DUST_THRESHOLD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SPLIT_TOKEN_DUST_THRESHOLD",
      "SPLIT_TOKEN_DUST_THRESHOLD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _reserveFundsFeePercent(): BigInt {
    let result = super.call(
      "_reserveFundsFeePercent",
      "_reserveFundsFeePercent():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try__reserveFundsFeePercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_reserveFundsFeePercent",
      "_reserveFundsFeePercent():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowedUIDTypes(param0: BigInt): BigInt {
    let result = super.call(
      "allowedUIDTypes",
      "allowedUIDTypes(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_allowedUIDTypes(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowedUIDTypes",
      "allowedUIDTypes(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  availableToCall(tokenId: BigInt): BigInt {
    let result = super.call(
      "availableToCall",
      "availableToCall(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return result[0].toBigInt();
  }

  try_availableToCall(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "availableToCall",
      "availableToCall(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  availableToWithdraw(
    tokenId: BigInt
  ): CallableLoan__availableToWithdrawResult {
    let result = super.call(
      "availableToWithdraw",
      "availableToWithdraw(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return new CallableLoan__availableToWithdrawResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_availableToWithdraw(
    tokenId: BigInt
  ): ethereum.CallResult<CallableLoan__availableToWithdrawResult> {
    let result = super.tryCall(
      "availableToWithdraw",
      "availableToWithdraw(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CallableLoan__availableToWithdrawResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  balance(): BigInt {
    let result = super.call("balance", "balance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_balance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balance", "balance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrower(): Address {
    let result = super.call("borrower", "borrower():(address)", []);

    return result[0].toAddress();
  }

  try_borrower(): ethereum.CallResult<Address> {
    let result = super.tryCall("borrower", "borrower():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  config(): Address {
    let result = super.call("config", "config():(address)", []);

    return result[0].toAddress();
  }

  try_config(): ethereum.CallResult<Address> {
    let result = super.tryCall("config", "config():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createdAt(): BigInt {
    let result = super.call("createdAt", "createdAt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_createdAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("createdAt", "createdAt():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  creditLine(): Address {
    let result = super.call("creditLine", "creditLine():(address)", []);

    return result[0].toAddress();
  }

  try_creditLine(): ethereum.CallResult<Address> {
    let result = super.tryCall("creditLine", "creditLine():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  currentLimit(): BigInt {
    let result = super.call("currentLimit", "currentLimit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentLimit", "currentLimit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deposit(tranche: BigInt, amount: BigInt): BigInt {
    let result = super.call("deposit", "deposit(uint256,uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(tranche),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigInt();
  }

  try_deposit(tranche: BigInt, amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "deposit",
      "deposit(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tranche),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositWithPermit(
    tranche: BigInt,
    amount: BigInt,
    deadline: BigInt,
    v: i32,
    r: Bytes,
    s: Bytes
  ): BigInt {
    let result = super.call(
      "depositWithPermit",
      "depositWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tranche),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );

    return result[0].toBigInt();
  }

  try_depositWithPermit(
    tranche: BigInt,
    amount: BigInt,
    deadline: BigInt,
    v: i32,
    r: Bytes,
    s: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "depositWithPermit",
      "depositWithPermit(uint256,uint256,uint256,uint8,bytes32,bytes32):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tranche),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(v)),
        ethereum.Value.fromFixedBytes(r),
        ethereum.Value.fromFixedBytes(s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  drawdownsPaused(): boolean {
    let result = super.call("drawdownsPaused", "drawdownsPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_drawdownsPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "drawdownsPaused",
      "drawdownsPaused():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  estimateOwedInterestAt(timestamp: BigInt): BigInt {
    let result = super.call(
      "estimateOwedInterestAt",
      "estimateOwedInterestAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );

    return result[0].toBigInt();
  }

  try_estimateOwedInterestAt(timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimateOwedInterestAt",
      "estimateOwedInterestAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  estimateOwedInterestAt1(balance: BigInt, timestamp: BigInt): BigInt {
    let result = super.call(
      "estimateOwedInterestAt",
      "estimateOwedInterestAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(balance),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_estimateOwedInterestAt1(
    balance: BigInt,
    timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimateOwedInterestAt",
      "estimateOwedInterestAt(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(balance),
        ethereum.Value.fromUnsignedBigInt(timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllowedUIDTypes(): Array<BigInt> {
    let result = super.call(
      "getAllowedUIDTypes",
      "getAllowedUIDTypes():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getAllowedUIDTypes(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getAllowedUIDTypes",
      "getAllowedUIDTypes():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAmountsOwed(timestamp: BigInt): CallableLoan__getAmountsOwedResult {
    let result = super.call(
      "getAmountsOwed",
      "getAmountsOwed(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );

    return new CallableLoan__getAmountsOwedResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getAmountsOwed(
    timestamp: BigInt
  ): ethereum.CallResult<CallableLoan__getAmountsOwedResult> {
    let result = super.tryCall(
      "getAmountsOwed",
      "getAmountsOwed(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CallableLoan__getAmountsOwedResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getCallRequestPeriod(
    callRequestPeriodIndex: BigInt
  ): CallableLoan__getCallRequestPeriodResultValue0Struct {
    let result = super.call(
      "getCallRequestPeriod",
      "getCallRequestPeriod(uint256):((uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(callRequestPeriodIndex)]
    );

    return changetype<CallableLoan__getCallRequestPeriodResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getCallRequestPeriod(
    callRequestPeriodIndex: BigInt
  ): ethereum.CallResult<CallableLoan__getCallRequestPeriodResultValue0Struct> {
    let result = super.tryCall(
      "getCallRequestPeriod",
      "getCallRequestPeriod(uint256):((uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(callRequestPeriodIndex)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<CallableLoan__getCallRequestPeriodResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getFundableAt(): BigInt {
    let result = super.call("getFundableAt", "getFundableAt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getFundableAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFundableAt",
      "getFundableAt():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLoanType(): i32 {
    let result = super.call("getLoanType", "getLoanType():(uint8)", []);

    return result[0].toI32();
  }

  try_getLoanType(): ethereum.CallResult<i32> {
    let result = super.tryCall("getLoanType", "getLoanType():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getUncalledCapitalInfo(): CallableLoan__getUncalledCapitalInfoResultValue0Struct {
    let result = super.call(
      "getUncalledCapitalInfo",
      "getUncalledCapitalInfo():((uint256,uint256,uint256,uint256))",
      []
    );

    return changetype<CallableLoan__getUncalledCapitalInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getUncalledCapitalInfo(): ethereum.CallResult<
    CallableLoan__getUncalledCapitalInfoResultValue0Struct
  > {
    let result = super.tryCall(
      "getUncalledCapitalInfo",
      "getUncalledCapitalInfo():((uint256,uint256,uint256,uint256))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<CallableLoan__getUncalledCapitalInfoResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getVersion(): Array<i32> {
    let result = super.call("getVersion", "getVersion():(uint8[3])", []);

    return result[0].toI32Array();
  }

  try_getVersion(): ethereum.CallResult<Array<i32>> {
    let result = super.tryCall("getVersion", "getVersion():(uint8[3])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32Array());
  }

  hasAllowedUID(sender: Address): boolean {
    let result = super.call("hasAllowedUID", "hasAllowedUID(address):(bool)", [
      ethereum.Value.fromAddress(sender)
    ]);

    return result[0].toBoolean();
  }

  try_hasAllowedUID(sender: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "hasAllowedUID",
      "hasAllowedUID(address):(bool)",
      [ethereum.Value.fromAddress(sender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  inLockupPeriod(): boolean {
    let result = super.call("inLockupPeriod", "inLockupPeriod():(bool)", []);

    return result[0].toBoolean();
  }

  try_inLockupPeriod(): ethereum.CallResult<boolean> {
    let result = super.tryCall("inLockupPeriod", "inLockupPeriod():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  interestAccrued(): BigInt {
    let result = super.call(
      "interestAccrued",
      "interestAccrued():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_interestAccrued(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestAccrued",
      "interestAccrued():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  interestAccruedAsOf(): BigInt {
    let result = super.call(
      "interestAccruedAsOf",
      "interestAccruedAsOf():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_interestAccruedAsOf(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestAccruedAsOf",
      "interestAccruedAsOf():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  interestAccruedAt(timestamp: BigInt): BigInt {
    let result = super.call(
      "interestAccruedAt",
      "interestAccruedAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );

    return result[0].toBigInt();
  }

  try_interestAccruedAt(timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestAccruedAt",
      "interestAccruedAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  interestApr(): BigInt {
    let result = super.call("interestApr", "interestApr():(uint256)", []);

    return result[0].toBigInt();
  }

  try_interestApr(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("interestApr", "interestApr():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  interestBearingBalance(): BigInt {
    let result = super.call(
      "interestBearingBalance",
      "interestBearingBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_interestBearingBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestBearingBalance",
      "interestBearingBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  interestOwed(): BigInt {
    let result = super.call("interestOwed", "interestOwed():(uint256)", []);

    return result[0].toBigInt();
  }

  try_interestOwed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("interestOwed", "interestOwed():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  interestOwedAt(timestamp: BigInt): BigInt {
    let result = super.call(
      "interestOwedAt",
      "interestOwedAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );

    return result[0].toBigInt();
  }

  try_interestOwedAt(timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "interestOwedAt",
      "interestOwedAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isAdmin(): boolean {
    let result = super.call("isAdmin", "isAdmin():(bool)", []);

    return result[0].toBoolean();
  }

  try_isAdmin(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAdmin", "isAdmin():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLate(): boolean {
    let result = super.call("isLate", "isLate():(bool)", []);

    return result[0].toBoolean();
  }

  try_isLate(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isLate", "isLate():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastFullPaymentTime(): BigInt {
    let result = super.call(
      "lastFullPaymentTime",
      "lastFullPaymentTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastFullPaymentTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastFullPaymentTime",
      "lastFullPaymentTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lateFeeApr(): BigInt {
    let result = super.call("lateFeeApr", "lateFeeApr():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lateFeeApr(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lateFeeApr", "lateFeeApr():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  limit(): BigInt {
    let result = super.call("limit", "limit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_limit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("limit", "limit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  loanPhase(): i32 {
    let result = super.call("loanPhase", "loanPhase():(uint8)", []);

    return result[0].toI32();
  }

  try_loanPhase(): ethereum.CallResult<i32> {
    let result = super.tryCall("loanPhase", "loanPhase():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  maxLimit(): BigInt {
    let result = super.call("maxLimit", "maxLimit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_maxLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("maxLimit", "maxLimit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextDueTime(): BigInt {
    let result = super.call("nextDueTime", "nextDueTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextDueTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextDueTime", "nextDueTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextDueTimeAt(timestamp: BigInt): BigInt {
    let result = super.call(
      "nextDueTimeAt",
      "nextDueTimeAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );

    return result[0].toBigInt();
  }

  try_nextDueTimeAt(timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextDueTimeAt",
      "nextDueTimeAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextInterestDueTimeAt(timestamp: BigInt): BigInt {
    let result = super.call(
      "nextInterestDueTimeAt",
      "nextInterestDueTimeAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );

    return result[0].toBigInt();
  }

  try_nextInterestDueTimeAt(timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextInterestDueTimeAt",
      "nextInterestDueTimeAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextPrincipalDueTime(): BigInt {
    let result = super.call(
      "nextPrincipalDueTime",
      "nextPrincipalDueTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nextPrincipalDueTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextPrincipalDueTime",
      "nextPrincipalDueTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numLockupPeriods(): BigInt {
    let result = super.call(
      "numLockupPeriods",
      "numLockupPeriods():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_numLockupPeriods(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numLockupPeriods",
      "numLockupPeriods():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pay(amount: BigInt): CallableLoan__payResultValue0Struct {
    let result = super.call(
      "pay",
      "pay(uint256):((uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return changetype<CallableLoan__payResultValue0Struct>(result[0].toTuple());
  }

  try_pay(
    amount: BigInt
  ): ethereum.CallResult<CallableLoan__payResultValue0Struct> {
    let result = super.tryCall(
      "pay",
      "pay(uint256):((uint256,uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<CallableLoan__payResultValue0Struct>(value[0].toTuple())
    );
  }

  pay1(
    principalPayment: BigInt,
    interestPayment: BigInt
  ): CallableLoan__pay1ResultValue0Struct {
    let result = super.call(
      "pay",
      "pay(uint256,uint256):((uint256,uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(principalPayment),
        ethereum.Value.fromUnsignedBigInt(interestPayment)
      ]
    );

    return changetype<CallableLoan__pay1ResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_pay1(
    principalPayment: BigInt,
    interestPayment: BigInt
  ): ethereum.CallResult<CallableLoan__pay1ResultValue0Struct> {
    let result = super.tryCall(
      "pay",
      "pay(uint256,uint256):((uint256,uint256,uint256,uint256,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(principalPayment),
        ethereum.Value.fromUnsignedBigInt(interestPayment)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<CallableLoan__pay1ResultValue0Struct>(value[0].toTuple())
    );
  }

  principalOwed(): BigInt {
    let result = super.call("principalOwed", "principalOwed():(uint256)", []);

    return result[0].toBigInt();
  }

  try_principalOwed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "principalOwed",
      "principalOwed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  principalOwedAt(timestamp: BigInt): BigInt {
    let result = super.call(
      "principalOwedAt",
      "principalOwedAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );

    return result[0].toBigInt();
  }

  try_principalOwedAt(timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "principalOwedAt",
      "principalOwedAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  schedule(): Address {
    let result = super.call("schedule", "schedule():(address)", []);

    return result[0].toAddress();
  }

  try_schedule(): ethereum.CallResult<Address> {
    let result = super.tryCall("schedule", "schedule():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  submitCall(
    callAmount: BigInt,
    poolTokenId: BigInt
  ): CallableLoan__submitCallResult {
    let result = super.call(
      "submitCall",
      "submitCall(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(callAmount),
        ethereum.Value.fromUnsignedBigInt(poolTokenId)
      ]
    );

    return new CallableLoan__submitCallResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_submitCall(
    callAmount: BigInt,
    poolTokenId: BigInt
  ): ethereum.CallResult<CallableLoan__submitCallResult> {
    let result = super.tryCall(
      "submitCall",
      "submitCall(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(callAmount),
        ethereum.Value.fromUnsignedBigInt(poolTokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CallableLoan__submitCallResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  termEndTime(): BigInt {
    let result = super.call("termEndTime", "termEndTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_termEndTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("termEndTime", "termEndTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  termStartTime(): BigInt {
    let result = super.call("termStartTime", "termStartTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_termStartTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "termStartTime",
      "termStartTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalInterestAccrued(): BigInt {
    let result = super.call(
      "totalInterestAccrued",
      "totalInterestAccrued():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalInterestAccrued(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalInterestAccrued",
      "totalInterestAccrued():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalInterestAccruedAt(timestamp: BigInt): BigInt {
    let result = super.call(
      "totalInterestAccruedAt",
      "totalInterestAccruedAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );

    return result[0].toBigInt();
  }

  try_totalInterestAccruedAt(timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalInterestAccruedAt",
      "totalInterestAccruedAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalInterestOwed(): BigInt {
    let result = super.call(
      "totalInterestOwed",
      "totalInterestOwed():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalInterestOwed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalInterestOwed",
      "totalInterestOwed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalInterestOwedAt(timestamp: BigInt): BigInt {
    let result = super.call(
      "totalInterestOwedAt",
      "totalInterestOwedAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );

    return result[0].toBigInt();
  }

  try_totalInterestOwedAt(timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalInterestOwedAt",
      "totalInterestOwedAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalInterestPaid(): BigInt {
    let result = super.call(
      "totalInterestPaid",
      "totalInterestPaid():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalInterestPaid(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalInterestPaid",
      "totalInterestPaid():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalPrincipalOwed(): BigInt {
    let result = super.call(
      "totalPrincipalOwed",
      "totalPrincipalOwed():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalPrincipalOwed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalPrincipalOwed",
      "totalPrincipalOwed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalPrincipalOwedAt(timestamp: BigInt): BigInt {
    let result = super.call(
      "totalPrincipalOwedAt",
      "totalPrincipalOwedAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );

    return result[0].toBigInt();
  }

  try_totalPrincipalOwedAt(timestamp: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalPrincipalOwedAt",
      "totalPrincipalOwedAt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalPrincipalPaid(): BigInt {
    let result = super.call(
      "totalPrincipalPaid",
      "totalPrincipalPaid():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalPrincipalPaid(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalPrincipalPaid",
      "totalPrincipalPaid():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uncalledCapitalTrancheIndex(): BigInt {
    let result = super.call(
      "uncalledCapitalTrancheIndex",
      "uncalledCapitalTrancheIndex():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_uncalledCapitalTrancheIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "uncalledCapitalTrancheIndex",
      "uncalledCapitalTrancheIndex():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  withdraw(tokenId: BigInt, amount: BigInt): CallableLoan__withdrawResult {
    let result = super.call(
      "withdraw",
      "withdraw(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return new CallableLoan__withdrawResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_withdraw(
    tokenId: BigInt,
    amount: BigInt
  ): ethereum.CallResult<CallableLoan__withdrawResult> {
    let result = super.tryCall(
      "withdraw",
      "withdraw(uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CallableLoan__withdrawResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  withdrawMax(tokenId: BigInt): CallableLoan__withdrawMaxResult {
    let result = super.call(
      "withdrawMax",
      "withdrawMax(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return new CallableLoan__withdrawMaxResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_withdrawMax(
    tokenId: BigInt
  ): ethereum.CallResult<CallableLoan__withdrawMaxResult> {
    let result = super.tryCall(
      "withdrawMax",
      "withdrawMax(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new CallableLoan__withdrawMaxResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  withinPrincipalGracePeriod(): boolean {
    let result = super.call(
      "withinPrincipalGracePeriod",
      "withinPrincipalGracePeriod():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_withinPrincipalGracePeriod(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "withinPrincipalGracePeriod",
      "withinPrincipalGracePeriod():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class __BaseUpgradeablePausable__initCall extends ethereum.Call {
  get inputs(): __BaseUpgradeablePausable__initCall__Inputs {
    return new __BaseUpgradeablePausable__initCall__Inputs(this);
  }

  get outputs(): __BaseUpgradeablePausable__initCall__Outputs {
    return new __BaseUpgradeablePausable__initCall__Outputs(this);
  }
}

export class __BaseUpgradeablePausable__initCall__Inputs {
  _call: __BaseUpgradeablePausable__initCall;

  constructor(call: __BaseUpgradeablePausable__initCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class __BaseUpgradeablePausable__initCall__Outputs {
  _call: __BaseUpgradeablePausable__initCall;

  constructor(call: __BaseUpgradeablePausable__initCall) {
    this._call = call;
  }
}

export class __PauserPausable__initCall extends ethereum.Call {
  get inputs(): __PauserPausable__initCall__Inputs {
    return new __PauserPausable__initCall__Inputs(this);
  }

  get outputs(): __PauserPausable__initCall__Outputs {
    return new __PauserPausable__initCall__Outputs(this);
  }
}

export class __PauserPausable__initCall__Inputs {
  _call: __PauserPausable__initCall;

  constructor(call: __PauserPausable__initCall) {
    this._call = call;
  }
}

export class __PauserPausable__initCall__Outputs {
  _call: __PauserPausable__initCall;

  constructor(call: __PauserPausable__initCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get tranche(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositWithPermitCall extends ethereum.Call {
  get inputs(): DepositWithPermitCall__Inputs {
    return new DepositWithPermitCall__Inputs(this);
  }

  get outputs(): DepositWithPermitCall__Outputs {
    return new DepositWithPermitCall__Outputs(this);
  }
}

export class DepositWithPermitCall__Inputs {
  _call: DepositWithPermitCall;

  constructor(call: DepositWithPermitCall) {
    this._call = call;
  }

  get tranche(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class DepositWithPermitCall__Outputs {
  _call: DepositWithPermitCall;

  constructor(call: DepositWithPermitCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DrawdownCall extends ethereum.Call {
  get inputs(): DrawdownCall__Inputs {
    return new DrawdownCall__Inputs(this);
  }

  get outputs(): DrawdownCall__Outputs {
    return new DrawdownCall__Outputs(this);
  }
}

export class DrawdownCall__Inputs {
  _call: DrawdownCall;

  constructor(call: DrawdownCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DrawdownCall__Outputs {
  _call: DrawdownCall;

  constructor(call: DrawdownCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _config(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _limit(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _interestApr(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _numLockupPeriods(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _schedule(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _lateFeeApr(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _fundableAt(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _allowedUIDTypes(): Array<BigInt> {
    return this._call.inputValues[8].value.toBigIntArray();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseDrawdownsCall extends ethereum.Call {
  get inputs(): PauseDrawdownsCall__Inputs {
    return new PauseDrawdownsCall__Inputs(this);
  }

  get outputs(): PauseDrawdownsCall__Outputs {
    return new PauseDrawdownsCall__Outputs(this);
  }
}

export class PauseDrawdownsCall__Inputs {
  _call: PauseDrawdownsCall;

  constructor(call: PauseDrawdownsCall) {
    this._call = call;
  }
}

export class PauseDrawdownsCall__Outputs {
  _call: PauseDrawdownsCall;

  constructor(call: PauseDrawdownsCall) {
    this._call = call;
  }
}

export class PayCall extends ethereum.Call {
  get inputs(): PayCall__Inputs {
    return new PayCall__Inputs(this);
  }

  get outputs(): PayCall__Outputs {
    return new PayCall__Outputs(this);
  }
}

export class PayCall__Inputs {
  _call: PayCall;

  constructor(call: PayCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class PayCall__Outputs {
  _call: PayCall;

  constructor(call: PayCall) {
    this._call = call;
  }

  get value0(): PayCallValue0Struct {
    return changetype<PayCallValue0Struct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class PayCallValue0Struct extends ethereum.Tuple {
  get owedInterestPayment(): BigInt {
    return this[0].toBigInt();
  }

  get accruedInterestPayment(): BigInt {
    return this[1].toBigInt();
  }

  get principalPayment(): BigInt {
    return this[2].toBigInt();
  }

  get additionalBalancePayment(): BigInt {
    return this[3].toBigInt();
  }

  get paymentRemaining(): BigInt {
    return this[4].toBigInt();
  }
}

export class Pay1Call extends ethereum.Call {
  get inputs(): Pay1Call__Inputs {
    return new Pay1Call__Inputs(this);
  }

  get outputs(): Pay1Call__Outputs {
    return new Pay1Call__Outputs(this);
  }
}

export class Pay1Call__Inputs {
  _call: Pay1Call;

  constructor(call: Pay1Call) {
    this._call = call;
  }

  get principalPayment(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get interestPayment(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class Pay1Call__Outputs {
  _call: Pay1Call;

  constructor(call: Pay1Call) {
    this._call = call;
  }

  get value0(): Pay1CallValue0Struct {
    return changetype<Pay1CallValue0Struct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class Pay1CallValue0Struct extends ethereum.Tuple {
  get owedInterestPayment(): BigInt {
    return this[0].toBigInt();
  }

  get accruedInterestPayment(): BigInt {
    return this[1].toBigInt();
  }

  get principalPayment(): BigInt {
    return this[2].toBigInt();
  }

  get additionalBalancePayment(): BigInt {
    return this[3].toBigInt();
  }

  get paymentRemaining(): BigInt {
    return this[4].toBigInt();
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetAllowedUIDTypesCall extends ethereum.Call {
  get inputs(): SetAllowedUIDTypesCall__Inputs {
    return new SetAllowedUIDTypesCall__Inputs(this);
  }

  get outputs(): SetAllowedUIDTypesCall__Outputs {
    return new SetAllowedUIDTypesCall__Outputs(this);
  }
}

export class SetAllowedUIDTypesCall__Inputs {
  _call: SetAllowedUIDTypesCall;

  constructor(call: SetAllowedUIDTypesCall) {
    this._call = call;
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetAllowedUIDTypesCall__Outputs {
  _call: SetAllowedUIDTypesCall;

  constructor(call: SetAllowedUIDTypesCall) {
    this._call = call;
  }
}

export class SetFundableAtCall extends ethereum.Call {
  get inputs(): SetFundableAtCall__Inputs {
    return new SetFundableAtCall__Inputs(this);
  }

  get outputs(): SetFundableAtCall__Outputs {
    return new SetFundableAtCall__Outputs(this);
  }
}

export class SetFundableAtCall__Inputs {
  _call: SetFundableAtCall;

  constructor(call: SetFundableAtCall) {
    this._call = call;
  }

  get newFundableAt(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFundableAtCall__Outputs {
  _call: SetFundableAtCall;

  constructor(call: SetFundableAtCall) {
    this._call = call;
  }
}

export class SetLimitCall extends ethereum.Call {
  get inputs(): SetLimitCall__Inputs {
    return new SetLimitCall__Inputs(this);
  }

  get outputs(): SetLimitCall__Outputs {
    return new SetLimitCall__Outputs(this);
  }
}

export class SetLimitCall__Inputs {
  _call: SetLimitCall;

  constructor(call: SetLimitCall) {
    this._call = call;
  }

  get newAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetLimitCall__Outputs {
  _call: SetLimitCall;

  constructor(call: SetLimitCall) {
    this._call = call;
  }
}

export class SetMaxLimitCall extends ethereum.Call {
  get inputs(): SetMaxLimitCall__Inputs {
    return new SetMaxLimitCall__Inputs(this);
  }

  get outputs(): SetMaxLimitCall__Outputs {
    return new SetMaxLimitCall__Outputs(this);
  }
}

export class SetMaxLimitCall__Inputs {
  _call: SetMaxLimitCall;

  constructor(call: SetMaxLimitCall) {
    this._call = call;
  }

  get newAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxLimitCall__Outputs {
  _call: SetMaxLimitCall;

  constructor(call: SetMaxLimitCall) {
    this._call = call;
  }
}

export class SubmitCallCall extends ethereum.Call {
  get inputs(): SubmitCallCall__Inputs {
    return new SubmitCallCall__Inputs(this);
  }

  get outputs(): SubmitCallCall__Outputs {
    return new SubmitCallCall__Outputs(this);
  }
}

export class SubmitCallCall__Inputs {
  _call: SubmitCallCall;

  constructor(call: SubmitCallCall) {
    this._call = call;
  }

  get callAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get poolTokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SubmitCallCall__Outputs {
  _call: SubmitCallCall;

  constructor(call: SubmitCallCall) {
    this._call = call;
  }

  get callRequestedTokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get remainingTokenId(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseDrawdownsCall extends ethereum.Call {
  get inputs(): UnpauseDrawdownsCall__Inputs {
    return new UnpauseDrawdownsCall__Inputs(this);
  }

  get outputs(): UnpauseDrawdownsCall__Outputs {
    return new UnpauseDrawdownsCall__Outputs(this);
  }
}

export class UnpauseDrawdownsCall__Inputs {
  _call: UnpauseDrawdownsCall;

  constructor(call: UnpauseDrawdownsCall) {
    this._call = call;
  }
}

export class UnpauseDrawdownsCall__Outputs {
  _call: UnpauseDrawdownsCall;

  constructor(call: UnpauseDrawdownsCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class WithdrawMaxCall extends ethereum.Call {
  get inputs(): WithdrawMaxCall__Inputs {
    return new WithdrawMaxCall__Inputs(this);
  }

  get outputs(): WithdrawMaxCall__Outputs {
    return new WithdrawMaxCall__Outputs(this);
  }
}

export class WithdrawMaxCall__Inputs {
  _call: WithdrawMaxCall;

  constructor(call: WithdrawMaxCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawMaxCall__Outputs {
  _call: WithdrawMaxCall;

  constructor(call: WithdrawMaxCall) {
    this._call = call;
  }

  get interestWithdrawn(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get principalWithdrawn(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class WithdrawMultipleCall extends ethereum.Call {
  get inputs(): WithdrawMultipleCall__Inputs {
    return new WithdrawMultipleCall__Inputs(this);
  }

  get outputs(): WithdrawMultipleCall__Outputs {
    return new WithdrawMultipleCall__Outputs(this);
  }
}

export class WithdrawMultipleCall__Inputs {
  _call: WithdrawMultipleCall;

  constructor(call: WithdrawMultipleCall) {
    this._call = call;
  }

  get tokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class WithdrawMultipleCall__Outputs {
  _call: WithdrawMultipleCall;

  constructor(call: WithdrawMultipleCall) {
    this._call = call;
  }
}
