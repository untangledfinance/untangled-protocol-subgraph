// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class GrantAccepted extends ethereum.Event {
  get params(): GrantAccepted__Params {
    return new GrantAccepted__Params(this);
  }
}

export class GrantAccepted__Params {
  _event: GrantAccepted;

  constructor(event: GrantAccepted) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get account(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get vestingLength(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get cliffLength(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get vestingInterval(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class BackerMerkleDistributor extends ethereum.SmartContract {
  static bind(address: Address): BackerMerkleDistributor {
    return new BackerMerkleDistributor("BackerMerkleDistributor", address);
  }

  communityRewards(): Address {
    let result = super.call(
      "communityRewards",
      "communityRewards():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_communityRewards(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "communityRewards",
      "communityRewards():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isGrantAccepted(index: BigInt): boolean {
    let result = super.call(
      "isGrantAccepted",
      "isGrantAccepted(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toBoolean();
  }

  try_isGrantAccepted(index: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isGrantAccepted",
      "isGrantAccepted(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  merkleRoot(): Bytes {
    let result = super.call("merkleRoot", "merkleRoot():(bytes32)", []);

    return result[0].toBytes();
  }

  try_merkleRoot(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("merkleRoot", "merkleRoot():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get communityRewards_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get merkleRoot_(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptGrantCall extends ethereum.Call {
  get inputs(): AcceptGrantCall__Inputs {
    return new AcceptGrantCall__Inputs(this);
  }

  get outputs(): AcceptGrantCall__Outputs {
    return new AcceptGrantCall__Outputs(this);
  }
}

export class AcceptGrantCall__Inputs {
  _call: AcceptGrantCall;

  constructor(call: AcceptGrantCall) {
    this._call = call;
  }

  get index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get vestingLength(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get cliffLength(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get vestingInterval(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get merkleProof(): Array<Bytes> {
    return this._call.inputValues[5].value.toBytesArray();
  }
}

export class AcceptGrantCall__Outputs {
  _call: AcceptGrantCall;

  constructor(call: AcceptGrantCall) {
    this._call = call;
  }
}
