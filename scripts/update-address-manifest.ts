import path from 'path';
import fs from 'fs';

import mainnetDeployments from '../../protocol/deployments/all.json';

type KnownNetwork = 'mainnet' | 'localhost';
const NETWORK_NAME = (process.env.NETWORK_NAME as KnownNetwork) ?? 'mainnet';

console.log(`Updating the address manifest for network ${NETWORK_NAME}`);

const mainnetContracts = mainnetDeployments['1'][0].contracts;
type Contracts = typeof mainnetContracts;

const devDeploymentsPath = path.resolve(
  __dirname,
  '../../protocol/deployments/all_dev.json'
);
let devContracts: Contracts | null = null;
if (fs.existsSync(devDeploymentsPath)) {
  devContracts = JSON.parse(fs.readFileSync(devDeploymentsPath).toString())[
    '31337'
  ][0].contracts;
}

if (NETWORK_NAME === 'localhost' && !devContracts) {
  throw new Error(
    'Requested addresses of localhost contracts, but all_dev.json does not exist or is malformed'
  );
}

const contracts =
  NETWORK_NAME === 'localhost' && devContracts
    ? devContracts
    : mainnetContracts;

function getAddress(contractName: keyof typeof contracts): string {
  return contracts[contractName].address.toLowerCase();
}

const code = `
// This file is automatically generated
// Network: ${NETWORK_NAME}
export const STAKING_REWARDS_ADDRESS = "${getAddress('StakingRewards')}";
export const POOL_TOKENS_ADDRESS = "${getAddress('PoolTokens')}";
export const UNTANGLED_CONFIG_ADDRESS = "${getAddress('UntangledConfig')}";
export const SENIOR_POOL_ADDRESS = "${getAddress('SeniorPool')}";
`;
fs.writeFileSync(path.resolve(__dirname, '../src/address-manifest.ts'), code);

console.log('Finished updating the address manifest');
