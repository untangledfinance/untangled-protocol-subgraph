type NoteTokenPurchased @entity(immutable: true) {
  id: Bytes!
  investor: Bytes! # address
  tgeAddress: Bytes! # address
  pool: PoolDetail! # address
  amount: BigInt! # uint256
  tokenAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PoolDetail @entity {
  id: ID!
  jotAddress: String
  tgeJOTAddress: String
  sotAddress: String
  tgeSOTAddress: String
  tokensPurchased: [NoteTokenPurchased!] @derivedFrom(field: "pool")
  totalSOTAmount: BigInt!
  totalJOTAmount: BigInt!
  # tokensRedeemed: [TokensRedeemed!]
  createdTimestamp: BigInt
  createdBlockNumber: BigInt
  createdTransactionHash: String
}

type RedeemOrder @entity {
  id: ID!
  pool: PoolDetail!
  noteTokenAddress: Bytes!
  user: Bytes!
  noteTokenRedeemAmount: BigInt!
  noteTokenPrice: BigInt
  createdTimestamp: BigInt
  createdBlockNumber: BigInt
  createdTransactionHash: String
}

type DrawdownAsset @entity {
  id: Bytes!
  pool: PoolDetail!
  drawdownAmount: BigInt!
  createdTimestamp: BigInt
  createdBlockNumber: BigInt
  createdTransactionHash: String
}

type AssetRepay @entity {
  id: Bytes!
  pool: PoolDetail!
  agreementId: Bytes!
  payer: String
  amount: BigInt!
  outstandingAmount: BigInt!
  token: Bytes!
  createdTimestamp: BigInt
  createdBlockNumber: BigInt
  createdTransactionHash: String
}

type UserPoolInvestment @entity {
  id: ID!
  investor: UserInvestment!
  pool: PoolDetail!
  totalSOTAmount: BigInt!
  totalJOTAmount: BigInt!
}

type UserInvestment @entity {
  id: ID!
  investments: [UserPoolInvestment!] @derivedFrom(field: "investor")
}
